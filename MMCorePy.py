# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_MMCorePy', [dirname(__file__)])
        except ImportError:
            import _MMCorePy
            return _MMCorePy
        if fp is not None:
            try:
                _mod = imp.load_module('_MMCorePy', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _MMCorePy = swig_import_helper()
    del swig_import_helper
else:
    import _MMCorePy
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    """Proxy of C++ swig::SwigPyIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _MMCorePy.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self):
        """
        value(self) -> PyObject
        Parameters:
           self: swig::SwigPyIterator const * value




        """
        return _MMCorePy.SwigPyIterator_value(self)

    def incr(self, n = 1):
        """
        incr(self, size_t n = 1) -> SwigPyIterator
        Parameters:
           n: size_t value

           n: size_t value

           n: size_t value

           n: size_t value

        incr(self) -> SwigPyIterator
        Parameters:
           self: swig::SwigPyIterator * value


        """
        return _MMCorePy.SwigPyIterator_incr(self, n)

    def decr(self, n = 1):
        """
        decr(self, size_t n = 1) -> SwigPyIterator
        Parameters:
           n: size_t value

           n: size_t value

           n: size_t value

           n: size_t value

        decr(self) -> SwigPyIterator
        Parameters:
           self: swig::SwigPyIterator * value


        """
        return _MMCorePy.SwigPyIterator_decr(self, n)

    def distance(self, *args):
        """
        distance(self, SwigPyIterator x) -> ptrdiff_t
        Parameters:
           self: swig::SwigPyIterator const * value
           x: swig::SwigPyIterator const & value

           x: swig::SwigPyIterator const & value

        """
        return _MMCorePy.SwigPyIterator_distance(self, *args)

    def equal(self, *args):
        """
        equal(self, SwigPyIterator x) -> bool
        Parameters:
           self: swig::SwigPyIterator const * value
           x: swig::SwigPyIterator const & value

           x: swig::SwigPyIterator const & value

        """
        return _MMCorePy.SwigPyIterator_equal(self, *args)

    def copy(self):
        """
        copy(self) -> SwigPyIterator
        Parameters:
           self: swig::SwigPyIterator const * value




        """
        return _MMCorePy.SwigPyIterator_copy(self)

    def next(self):
        """
        next(self) -> PyObject
        Parameters:
           self: swig::SwigPyIterator * value




        """
        return _MMCorePy.SwigPyIterator_next(self)

    def __next__(self):
        """
        __next__(self) -> PyObject
        Parameters:
           self: swig::SwigPyIterator * value




        """
        return _MMCorePy.SwigPyIterator___next__(self)

    def previous(self):
        """
        previous(self) -> PyObject
        Parameters:
           self: swig::SwigPyIterator * value




        """
        return _MMCorePy.SwigPyIterator_previous(self)

    def advance(self, *args):
        """
        advance(self, ptrdiff_t n) -> SwigPyIterator
        Parameters:
           self: swig::SwigPyIterator * value
           n: ptrdiff_t value

           n: ptrdiff_t value

        """
        return _MMCorePy.SwigPyIterator_advance(self, *args)

    def __eq__(self, *args):
        """
        __eq__(self, SwigPyIterator x) -> bool
        Parameters:
           self: swig::SwigPyIterator const * value
           x: swig::SwigPyIterator const & value

           x: swig::SwigPyIterator const & value

        """
        return _MMCorePy.SwigPyIterator___eq__(self, *args)

    def __ne__(self, *args):
        """
        __ne__(self, SwigPyIterator x) -> bool
        Parameters:
           self: swig::SwigPyIterator const * value
           x: swig::SwigPyIterator const & value

           x: swig::SwigPyIterator const & value

        """
        return _MMCorePy.SwigPyIterator___ne__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(self, ptrdiff_t n) -> SwigPyIterator
        Parameters:
           self: swig::SwigPyIterator * value
           n: ptrdiff_t value

           n: ptrdiff_t value

        """
        return _MMCorePy.SwigPyIterator___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(self, ptrdiff_t n) -> SwigPyIterator
        Parameters:
           self: swig::SwigPyIterator * value
           n: ptrdiff_t value

           n: ptrdiff_t value

        """
        return _MMCorePy.SwigPyIterator___isub__(self, *args)

    def __add__(self, *args):
        """
        __add__(self, ptrdiff_t n) -> SwigPyIterator
        Parameters:
           self: swig::SwigPyIterator const * value
           n: ptrdiff_t value

           n: ptrdiff_t value

        """
        return _MMCorePy.SwigPyIterator___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(self, ptrdiff_t n) -> SwigPyIterator
        Parameters:
           n: ptrdiff_t value

           n: ptrdiff_t value

        __sub__(self, SwigPyIterator x) -> ptrdiff_t
        Parameters:
           self: swig::SwigPyIterator const * value
           x: swig::SwigPyIterator const & value

           x: swig::SwigPyIterator const & value

        """
        return _MMCorePy.SwigPyIterator___sub__(self, *args)

    def __iter__(self): return self
SwigPyIterator_swigregister = _MMCorePy.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class CharVector(_object):
    """Proxy of C++ std::vector<(char)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CharVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CharVector, name)
    __repr__ = _swig_repr
    def iterator(self):
        """
        iterator(self) -> SwigPyIterator
        Parameters:
           self: std::vector< char > * value




        """
        return _MMCorePy.CharVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """
        __nonzero__(self) -> bool
        Parameters:
           self: std::vector< char > const * value




        """
        return _MMCorePy.CharVector___nonzero__(self)

    def __bool__(self):
        """
        __bool__(self) -> bool
        Parameters:
           self: std::vector< char > const * value




        """
        return _MMCorePy.CharVector___bool__(self)

    def __len__(self):
        """
        __len__(self) -> size_type
        Parameters:
           self: std::vector< char > const * value




        """
        return _MMCorePy.CharVector___len__(self)

    def pop(self):
        """
        pop(self) -> value_type
        Parameters:
           self: std::vector< char > * value




        """
        return _MMCorePy.CharVector_pop(self)

    def __getslice__(self, *args):
        """
        __getslice__(self, difference_type i, difference_type j) -> CharVector
        Parameters:
           self: std::vector< char > * value
           i: std::vector< char >::difference_type value
           j: std::vector< char >::difference_type value

           i: std::vector< char >::difference_type value
           j: std::vector< char >::difference_type value

        """
        return _MMCorePy.CharVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(self, difference_type i, difference_type j, CharVector v)
        Parameters:
           self: std::vector< char > * value
           i: std::vector< char >::difference_type value
           j: std::vector< char >::difference_type value
           v: std::vector< char,std::allocator< char > > const & value

           i: std::vector< char >::difference_type value
           j: std::vector< char >::difference_type value
           v: std::vector< char,std::allocator< char > > const & value

        """
        return _MMCorePy.CharVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """
        __delslice__(self, difference_type i, difference_type j)
        Parameters:
           self: std::vector< char > * value
           i: std::vector< char >::difference_type value
           j: std::vector< char >::difference_type value

           i: std::vector< char >::difference_type value
           j: std::vector< char >::difference_type value

        """
        return _MMCorePy.CharVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        Parameters:
           i: std::vector< char >::difference_type value

           i: std::vector< char >::difference_type value

        __delitem__(self, PySliceObject slice)
        Parameters:
           self: std::vector< char > * value
           slice: PySliceObject * value

           slice: PySliceObject * value

        """
        return _MMCorePy.CharVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> CharVector
        Parameters:
           slice: PySliceObject * value

           slice: PySliceObject * value

        __getitem__(self, difference_type i) -> value_type
        Parameters:
           self: std::vector< char > const * value
           i: std::vector< char >::difference_type value

           i: std::vector< char >::difference_type value

        """
        return _MMCorePy.CharVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, CharVector v)
        Parameters:
           slice: PySliceObject * value
           v: std::vector< char,std::allocator< char > > const & value

           slice: PySliceObject * value
           v: std::vector< char,std::allocator< char > > const & value

        __setitem__(self, difference_type i, value_type x)
        Parameters:
           self: std::vector< char > * value
           i: std::vector< char >::difference_type value
           x: std::vector< char >::value_type const & value

           i: std::vector< char >::difference_type value
           x: std::vector< char >::value_type const & value

        """
        return _MMCorePy.CharVector___setitem__(self, *args)

    def append(self, *args):
        """
        append(self, value_type x)
        Parameters:
           self: std::vector< char > * value
           x: std::vector< char >::value_type const & value

           x: std::vector< char >::value_type const & value

        """
        return _MMCorePy.CharVector_append(self, *args)

    def empty(self):
        """
        empty(self) -> bool
        Parameters:
           self: std::vector< char > const * value




        """
        return _MMCorePy.CharVector_empty(self)

    def size(self):
        """
        size(self) -> size_type
        Parameters:
           self: std::vector< char > const * value




        """
        return _MMCorePy.CharVector_size(self)

    def clear(self):
        """
        clear(self)
        Parameters:
           self: std::vector< char > * value




        """
        return _MMCorePy.CharVector_clear(self)

    def swap(self, *args):
        """
        swap(self, CharVector v)
        Parameters:
           self: std::vector< char > * value
           v: std::vector< char > & value

           v: std::vector< char > & value

        """
        return _MMCorePy.CharVector_swap(self, *args)

    def get_allocator(self):
        """
        get_allocator(self) -> allocator_type
        Parameters:
           self: std::vector< char > const * value




        """
        return _MMCorePy.CharVector_get_allocator(self)

    def begin(self):
        """
        begin(self) -> const_iterator
        Parameters:
           self: std::vector< char > const * value




        """
        return _MMCorePy.CharVector_begin(self)

    def end(self):
        """
        end(self) -> const_iterator
        Parameters:
           self: std::vector< char > const * value




        """
        return _MMCorePy.CharVector_end(self)

    def rbegin(self):
        """
        rbegin(self) -> const_reverse_iterator
        Parameters:
           self: std::vector< char > const * value




        """
        return _MMCorePy.CharVector_rbegin(self)

    def rend(self):
        """
        rend(self) -> const_reverse_iterator
        Parameters:
           self: std::vector< char > const * value




        """
        return _MMCorePy.CharVector_rend(self)

    def pop_back(self):
        """
        pop_back(self)
        Parameters:
           self: std::vector< char > * value




        """
        return _MMCorePy.CharVector_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        Parameters:
           pos: std::vector< char >::iterator value

           pos: std::vector< char >::iterator value

        erase(self, iterator first, iterator last) -> iterator
        Parameters:
           self: std::vector< char > * value
           first: std::vector< char >::iterator value
           last: std::vector< char >::iterator value

           first: std::vector< char >::iterator value
           last: std::vector< char >::iterator value

        """
        return _MMCorePy.CharVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> CharVector
        __init__(self, CharVector arg0) -> CharVector
        Parameters:
           : std::vector< char > const & value

           : std::vector< char > const & value

        __init__(self, size_type size) -> CharVector
        Parameters:
           size: std::vector< char >::size_type value

           size: std::vector< char >::size_type value

        __init__(self, size_type size, value_type value) -> CharVector
        Parameters:
           size: std::vector< char >::size_type value
           value: std::vector< char >::value_type const & value

           size: std::vector< char >::size_type value
           value: std::vector< char >::value_type const & value

        """
        this = _MMCorePy.new_CharVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """
        push_back(self, value_type x)
        Parameters:
           self: std::vector< char > * value
           x: std::vector< char >::value_type const & value

           x: std::vector< char >::value_type const & value

        """
        return _MMCorePy.CharVector_push_back(self, *args)

    def front(self):
        """
        front(self) -> value_type
        Parameters:
           self: std::vector< char > const * value




        """
        return _MMCorePy.CharVector_front(self)

    def back(self):
        """
        back(self) -> value_type
        Parameters:
           self: std::vector< char > const * value




        """
        return _MMCorePy.CharVector_back(self)

    def assign(self, *args):
        """
        assign(self, size_type n, value_type x)
        Parameters:
           self: std::vector< char > * value
           n: std::vector< char >::size_type value
           x: std::vector< char >::value_type const & value

           n: std::vector< char >::size_type value
           x: std::vector< char >::value_type const & value

        """
        return _MMCorePy.CharVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        Parameters:
           new_size: std::vector< char >::size_type value

           new_size: std::vector< char >::size_type value

        resize(self, size_type new_size, value_type x)
        Parameters:
           self: std::vector< char > * value
           new_size: std::vector< char >::size_type value
           x: std::vector< char >::value_type const & value

           new_size: std::vector< char >::size_type value
           x: std::vector< char >::value_type const & value

        """
        return _MMCorePy.CharVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        Parameters:
           pos: std::vector< char >::iterator value
           x: std::vector< char >::value_type const & value

           pos: std::vector< char >::iterator value
           x: std::vector< char >::value_type const & value

        insert(self, iterator pos, size_type n, value_type x)
        Parameters:
           self: std::vector< char > * value
           pos: std::vector< char >::iterator value
           n: std::vector< char >::size_type value
           x: std::vector< char >::value_type const & value

           pos: std::vector< char >::iterator value
           n: std::vector< char >::size_type value
           x: std::vector< char >::value_type const & value

        """
        return _MMCorePy.CharVector_insert(self, *args)

    def reserve(self, *args):
        """
        reserve(self, size_type n)
        Parameters:
           self: std::vector< char > * value
           n: std::vector< char >::size_type value

           n: std::vector< char >::size_type value

        """
        return _MMCorePy.CharVector_reserve(self, *args)

    def capacity(self):
        """
        capacity(self) -> size_type
        Parameters:
           self: std::vector< char > const * value




        """
        return _MMCorePy.CharVector_capacity(self)

    __swig_destroy__ = _MMCorePy.delete_CharVector
    __del__ = lambda self : None;
CharVector_swigregister = _MMCorePy.CharVector_swigregister
CharVector_swigregister(CharVector)

class LongVector(_object):
    """Proxy of C++ std::vector<(long)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LongVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LongVector, name)
    __repr__ = _swig_repr
    def iterator(self):
        """
        iterator(self) -> SwigPyIterator
        Parameters:
           self: std::vector< long > * value




        """
        return _MMCorePy.LongVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """
        __nonzero__(self) -> bool
        Parameters:
           self: std::vector< long > const * value




        """
        return _MMCorePy.LongVector___nonzero__(self)

    def __bool__(self):
        """
        __bool__(self) -> bool
        Parameters:
           self: std::vector< long > const * value




        """
        return _MMCorePy.LongVector___bool__(self)

    def __len__(self):
        """
        __len__(self) -> size_type
        Parameters:
           self: std::vector< long > const * value




        """
        return _MMCorePy.LongVector___len__(self)

    def pop(self):
        """
        pop(self) -> value_type
        Parameters:
           self: std::vector< long > * value




        """
        return _MMCorePy.LongVector_pop(self)

    def __getslice__(self, *args):
        """
        __getslice__(self, difference_type i, difference_type j) -> LongVector
        Parameters:
           self: std::vector< long > * value
           i: std::vector< long >::difference_type value
           j: std::vector< long >::difference_type value

           i: std::vector< long >::difference_type value
           j: std::vector< long >::difference_type value

        """
        return _MMCorePy.LongVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(self, difference_type i, difference_type j, LongVector v)
        Parameters:
           self: std::vector< long > * value
           i: std::vector< long >::difference_type value
           j: std::vector< long >::difference_type value
           v: std::vector< long,std::allocator< long > > const & value

           i: std::vector< long >::difference_type value
           j: std::vector< long >::difference_type value
           v: std::vector< long,std::allocator< long > > const & value

        """
        return _MMCorePy.LongVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """
        __delslice__(self, difference_type i, difference_type j)
        Parameters:
           self: std::vector< long > * value
           i: std::vector< long >::difference_type value
           j: std::vector< long >::difference_type value

           i: std::vector< long >::difference_type value
           j: std::vector< long >::difference_type value

        """
        return _MMCorePy.LongVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        Parameters:
           i: std::vector< long >::difference_type value

           i: std::vector< long >::difference_type value

        __delitem__(self, PySliceObject slice)
        Parameters:
           self: std::vector< long > * value
           slice: PySliceObject * value

           slice: PySliceObject * value

        """
        return _MMCorePy.LongVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> LongVector
        Parameters:
           slice: PySliceObject * value

           slice: PySliceObject * value

        __getitem__(self, difference_type i) -> value_type
        Parameters:
           self: std::vector< long > const * value
           i: std::vector< long >::difference_type value

           i: std::vector< long >::difference_type value

        """
        return _MMCorePy.LongVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, LongVector v)
        Parameters:
           slice: PySliceObject * value
           v: std::vector< long,std::allocator< long > > const & value

           slice: PySliceObject * value
           v: std::vector< long,std::allocator< long > > const & value

        __setitem__(self, difference_type i, value_type x)
        Parameters:
           self: std::vector< long > * value
           i: std::vector< long >::difference_type value
           x: std::vector< long >::value_type const & value

           i: std::vector< long >::difference_type value
           x: std::vector< long >::value_type const & value

        """
        return _MMCorePy.LongVector___setitem__(self, *args)

    def append(self, *args):
        """
        append(self, value_type x)
        Parameters:
           self: std::vector< long > * value
           x: std::vector< long >::value_type const & value

           x: std::vector< long >::value_type const & value

        """
        return _MMCorePy.LongVector_append(self, *args)

    def empty(self):
        """
        empty(self) -> bool
        Parameters:
           self: std::vector< long > const * value




        """
        return _MMCorePy.LongVector_empty(self)

    def size(self):
        """
        size(self) -> size_type
        Parameters:
           self: std::vector< long > const * value




        """
        return _MMCorePy.LongVector_size(self)

    def clear(self):
        """
        clear(self)
        Parameters:
           self: std::vector< long > * value




        """
        return _MMCorePy.LongVector_clear(self)

    def swap(self, *args):
        """
        swap(self, LongVector v)
        Parameters:
           self: std::vector< long > * value
           v: std::vector< long > & value

           v: std::vector< long > & value

        """
        return _MMCorePy.LongVector_swap(self, *args)

    def get_allocator(self):
        """
        get_allocator(self) -> allocator_type
        Parameters:
           self: std::vector< long > const * value




        """
        return _MMCorePy.LongVector_get_allocator(self)

    def begin(self):
        """
        begin(self) -> const_iterator
        Parameters:
           self: std::vector< long > const * value




        """
        return _MMCorePy.LongVector_begin(self)

    def end(self):
        """
        end(self) -> const_iterator
        Parameters:
           self: std::vector< long > const * value




        """
        return _MMCorePy.LongVector_end(self)

    def rbegin(self):
        """
        rbegin(self) -> const_reverse_iterator
        Parameters:
           self: std::vector< long > const * value




        """
        return _MMCorePy.LongVector_rbegin(self)

    def rend(self):
        """
        rend(self) -> const_reverse_iterator
        Parameters:
           self: std::vector< long > const * value




        """
        return _MMCorePy.LongVector_rend(self)

    def pop_back(self):
        """
        pop_back(self)
        Parameters:
           self: std::vector< long > * value




        """
        return _MMCorePy.LongVector_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        Parameters:
           pos: std::vector< long >::iterator value

           pos: std::vector< long >::iterator value

        erase(self, iterator first, iterator last) -> iterator
        Parameters:
           self: std::vector< long > * value
           first: std::vector< long >::iterator value
           last: std::vector< long >::iterator value

           first: std::vector< long >::iterator value
           last: std::vector< long >::iterator value

        """
        return _MMCorePy.LongVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> LongVector
        __init__(self, LongVector arg0) -> LongVector
        Parameters:
           : std::vector< long > const & value

           : std::vector< long > const & value

        __init__(self, size_type size) -> LongVector
        Parameters:
           size: std::vector< long >::size_type value

           size: std::vector< long >::size_type value

        __init__(self, size_type size, value_type value) -> LongVector
        Parameters:
           size: std::vector< long >::size_type value
           value: std::vector< long >::value_type const & value

           size: std::vector< long >::size_type value
           value: std::vector< long >::value_type const & value

        """
        this = _MMCorePy.new_LongVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """
        push_back(self, value_type x)
        Parameters:
           self: std::vector< long > * value
           x: std::vector< long >::value_type const & value

           x: std::vector< long >::value_type const & value

        """
        return _MMCorePy.LongVector_push_back(self, *args)

    def front(self):
        """
        front(self) -> value_type
        Parameters:
           self: std::vector< long > const * value




        """
        return _MMCorePy.LongVector_front(self)

    def back(self):
        """
        back(self) -> value_type
        Parameters:
           self: std::vector< long > const * value




        """
        return _MMCorePy.LongVector_back(self)

    def assign(self, *args):
        """
        assign(self, size_type n, value_type x)
        Parameters:
           self: std::vector< long > * value
           n: std::vector< long >::size_type value
           x: std::vector< long >::value_type const & value

           n: std::vector< long >::size_type value
           x: std::vector< long >::value_type const & value

        """
        return _MMCorePy.LongVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        Parameters:
           new_size: std::vector< long >::size_type value

           new_size: std::vector< long >::size_type value

        resize(self, size_type new_size, value_type x)
        Parameters:
           self: std::vector< long > * value
           new_size: std::vector< long >::size_type value
           x: std::vector< long >::value_type const & value

           new_size: std::vector< long >::size_type value
           x: std::vector< long >::value_type const & value

        """
        return _MMCorePy.LongVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        Parameters:
           pos: std::vector< long >::iterator value
           x: std::vector< long >::value_type const & value

           pos: std::vector< long >::iterator value
           x: std::vector< long >::value_type const & value

        insert(self, iterator pos, size_type n, value_type x)
        Parameters:
           self: std::vector< long > * value
           pos: std::vector< long >::iterator value
           n: std::vector< long >::size_type value
           x: std::vector< long >::value_type const & value

           pos: std::vector< long >::iterator value
           n: std::vector< long >::size_type value
           x: std::vector< long >::value_type const & value

        """
        return _MMCorePy.LongVector_insert(self, *args)

    def reserve(self, *args):
        """
        reserve(self, size_type n)
        Parameters:
           self: std::vector< long > * value
           n: std::vector< long >::size_type value

           n: std::vector< long >::size_type value

        """
        return _MMCorePy.LongVector_reserve(self, *args)

    def capacity(self):
        """
        capacity(self) -> size_type
        Parameters:
           self: std::vector< long > const * value




        """
        return _MMCorePy.LongVector_capacity(self)

    __swig_destroy__ = _MMCorePy.delete_LongVector
    __del__ = lambda self : None;
LongVector_swigregister = _MMCorePy.LongVector_swigregister
LongVector_swigregister(LongVector)

class StrVector(_object):
    """Proxy of C++ std::vector<(std::string)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StrVector, name)
    __repr__ = _swig_repr
    def iterator(self):
        """
        iterator(self) -> SwigPyIterator
        Parameters:
           self: std::vector< std::string > * value




        """
        return _MMCorePy.StrVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """
        __nonzero__(self) -> bool
        Parameters:
           self: std::vector< std::string > const * value




        """
        return _MMCorePy.StrVector___nonzero__(self)

    def __bool__(self):
        """
        __bool__(self) -> bool
        Parameters:
           self: std::vector< std::string > const * value




        """
        return _MMCorePy.StrVector___bool__(self)

    def __len__(self):
        """
        __len__(self) -> size_type
        Parameters:
           self: std::vector< std::string > const * value




        """
        return _MMCorePy.StrVector___len__(self)

    def pop(self):
        """
        pop(self) -> value_type
        Parameters:
           self: std::vector< std::string > * value




        """
        return _MMCorePy.StrVector_pop(self)

    def __getslice__(self, *args):
        """
        __getslice__(self, difference_type i, difference_type j) -> StrVector
        Parameters:
           self: std::vector< std::string > * value
           i: std::vector< std::string >::difference_type value
           j: std::vector< std::string >::difference_type value

           i: std::vector< std::string >::difference_type value
           j: std::vector< std::string >::difference_type value

        """
        return _MMCorePy.StrVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(self, difference_type i, difference_type j, StrVector v)
        Parameters:
           self: std::vector< std::string > * value
           i: std::vector< std::string >::difference_type value
           j: std::vector< std::string >::difference_type value
           v: std::vector< std::string,std::allocator< std::string > > const & value

           i: std::vector< std::string >::difference_type value
           j: std::vector< std::string >::difference_type value
           v: std::vector< std::string,std::allocator< std::string > > const & value

        """
        return _MMCorePy.StrVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """
        __delslice__(self, difference_type i, difference_type j)
        Parameters:
           self: std::vector< std::string > * value
           i: std::vector< std::string >::difference_type value
           j: std::vector< std::string >::difference_type value

           i: std::vector< std::string >::difference_type value
           j: std::vector< std::string >::difference_type value

        """
        return _MMCorePy.StrVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        Parameters:
           i: std::vector< std::string >::difference_type value

           i: std::vector< std::string >::difference_type value

        __delitem__(self, PySliceObject slice)
        Parameters:
           self: std::vector< std::string > * value
           slice: PySliceObject * value

           slice: PySliceObject * value

        """
        return _MMCorePy.StrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> StrVector
        Parameters:
           slice: PySliceObject * value

           slice: PySliceObject * value

        __getitem__(self, difference_type i) -> value_type
        Parameters:
           self: std::vector< std::string > const * value
           i: std::vector< std::string >::difference_type value

           i: std::vector< std::string >::difference_type value

        """
        return _MMCorePy.StrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, StrVector v)
        Parameters:
           slice: PySliceObject * value
           v: std::vector< std::string,std::allocator< std::string > > const & value

           slice: PySliceObject * value
           v: std::vector< std::string,std::allocator< std::string > > const & value

        __setitem__(self, difference_type i, value_type x)
        Parameters:
           self: std::vector< std::string > * value
           i: std::vector< std::string >::difference_type value
           x: std::vector< std::string >::value_type const & value

           i: std::vector< std::string >::difference_type value
           x: std::vector< std::string >::value_type const & value

        """
        return _MMCorePy.StrVector___setitem__(self, *args)

    def append(self, *args):
        """
        append(self, value_type x)
        Parameters:
           self: std::vector< std::string > * value
           x: std::vector< std::string >::value_type const & value

           x: std::vector< std::string >::value_type const & value

        """
        return _MMCorePy.StrVector_append(self, *args)

    def empty(self):
        """
        empty(self) -> bool
        Parameters:
           self: std::vector< std::string > const * value




        """
        return _MMCorePy.StrVector_empty(self)

    def size(self):
        """
        size(self) -> size_type
        Parameters:
           self: std::vector< std::string > const * value




        """
        return _MMCorePy.StrVector_size(self)

    def clear(self):
        """
        clear(self)
        Parameters:
           self: std::vector< std::string > * value




        """
        return _MMCorePy.StrVector_clear(self)

    def swap(self, *args):
        """
        swap(self, StrVector v)
        Parameters:
           self: std::vector< std::string > * value
           v: std::vector< std::string > & value

           v: std::vector< std::string > & value

        """
        return _MMCorePy.StrVector_swap(self, *args)

    def get_allocator(self):
        """
        get_allocator(self) -> allocator_type
        Parameters:
           self: std::vector< std::string > const * value




        """
        return _MMCorePy.StrVector_get_allocator(self)

    def begin(self):
        """
        begin(self) -> const_iterator
        Parameters:
           self: std::vector< std::string > const * value




        """
        return _MMCorePy.StrVector_begin(self)

    def end(self):
        """
        end(self) -> const_iterator
        Parameters:
           self: std::vector< std::string > const * value




        """
        return _MMCorePy.StrVector_end(self)

    def rbegin(self):
        """
        rbegin(self) -> const_reverse_iterator
        Parameters:
           self: std::vector< std::string > const * value




        """
        return _MMCorePy.StrVector_rbegin(self)

    def rend(self):
        """
        rend(self) -> const_reverse_iterator
        Parameters:
           self: std::vector< std::string > const * value




        """
        return _MMCorePy.StrVector_rend(self)

    def pop_back(self):
        """
        pop_back(self)
        Parameters:
           self: std::vector< std::string > * value




        """
        return _MMCorePy.StrVector_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        Parameters:
           pos: std::vector< std::string >::iterator value

           pos: std::vector< std::string >::iterator value

        erase(self, iterator first, iterator last) -> iterator
        Parameters:
           self: std::vector< std::string > * value
           first: std::vector< std::string >::iterator value
           last: std::vector< std::string >::iterator value

           first: std::vector< std::string >::iterator value
           last: std::vector< std::string >::iterator value

        """
        return _MMCorePy.StrVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> StrVector
        __init__(self, StrVector arg0) -> StrVector
        Parameters:
           : std::vector< std::string > const & value

           : std::vector< std::string > const & value

        __init__(self, size_type size) -> StrVector
        Parameters:
           size: std::vector< std::string >::size_type value

           size: std::vector< std::string >::size_type value

        __init__(self, size_type size, value_type value) -> StrVector
        Parameters:
           size: std::vector< std::string >::size_type value
           value: std::vector< std::string >::value_type const & value

           size: std::vector< std::string >::size_type value
           value: std::vector< std::string >::value_type const & value

        """
        this = _MMCorePy.new_StrVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """
        push_back(self, value_type x)
        Parameters:
           self: std::vector< std::string > * value
           x: std::vector< std::string >::value_type const & value

           x: std::vector< std::string >::value_type const & value

        """
        return _MMCorePy.StrVector_push_back(self, *args)

    def front(self):
        """
        front(self) -> value_type
        Parameters:
           self: std::vector< std::string > const * value




        """
        return _MMCorePy.StrVector_front(self)

    def back(self):
        """
        back(self) -> value_type
        Parameters:
           self: std::vector< std::string > const * value




        """
        return _MMCorePy.StrVector_back(self)

    def assign(self, *args):
        """
        assign(self, size_type n, value_type x)
        Parameters:
           self: std::vector< std::string > * value
           n: std::vector< std::string >::size_type value
           x: std::vector< std::string >::value_type const & value

           n: std::vector< std::string >::size_type value
           x: std::vector< std::string >::value_type const & value

        """
        return _MMCorePy.StrVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        Parameters:
           new_size: std::vector< std::string >::size_type value

           new_size: std::vector< std::string >::size_type value

        resize(self, size_type new_size, value_type x)
        Parameters:
           self: std::vector< std::string > * value
           new_size: std::vector< std::string >::size_type value
           x: std::vector< std::string >::value_type const & value

           new_size: std::vector< std::string >::size_type value
           x: std::vector< std::string >::value_type const & value

        """
        return _MMCorePy.StrVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        Parameters:
           pos: std::vector< std::string >::iterator value
           x: std::vector< std::string >::value_type const & value

           pos: std::vector< std::string >::iterator value
           x: std::vector< std::string >::value_type const & value

        insert(self, iterator pos, size_type n, value_type x)
        Parameters:
           self: std::vector< std::string > * value
           pos: std::vector< std::string >::iterator value
           n: std::vector< std::string >::size_type value
           x: std::vector< std::string >::value_type const & value

           pos: std::vector< std::string >::iterator value
           n: std::vector< std::string >::size_type value
           x: std::vector< std::string >::value_type const & value

        """
        return _MMCorePy.StrVector_insert(self, *args)

    def reserve(self, *args):
        """
        reserve(self, size_type n)
        Parameters:
           self: std::vector< std::string > * value
           n: std::vector< std::string >::size_type value

           n: std::vector< std::string >::size_type value

        """
        return _MMCorePy.StrVector_reserve(self, *args)

    def capacity(self):
        """
        capacity(self) -> size_type
        Parameters:
           self: std::vector< std::string > const * value




        """
        return _MMCorePy.StrVector_capacity(self)

    __swig_destroy__ = _MMCorePy.delete_StrVector
    __del__ = lambda self : None;
StrVector_swigregister = _MMCorePy.StrVector_swigregister
StrVector_swigregister(StrVector)

class pair_ss(_object):
    """Proxy of C++ std::pair<(std::string,std::string)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pair_ss, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pair_ss, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> pair_ss
        __init__(self, string first, string second) -> pair_ss
        Parameters:
           first: std::string value
           second: std::string value

           first: std::string value
           second: std::string value

        __init__(self, pair_ss p) -> pair_ss
        Parameters:
           p: std::pair< std::string,std::string > const & value

           p: std::pair< std::string,std::string > const & value

        """
        this = _MMCorePy.new_pair_ss(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _MMCorePy.pair_ss_first_set
    __swig_getmethods__["first"] = _MMCorePy.pair_ss_first_get
    if _newclass:first = _swig_property(_MMCorePy.pair_ss_first_get, _MMCorePy.pair_ss_first_set)
    __swig_setmethods__["second"] = _MMCorePy.pair_ss_second_set
    __swig_getmethods__["second"] = _MMCorePy.pair_ss_second_get
    if _newclass:second = _swig_property(_MMCorePy.pair_ss_second_get, _MMCorePy.pair_ss_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _MMCorePy.delete_pair_ss
    __del__ = lambda self : None;
pair_ss_swigregister = _MMCorePy.pair_ss_swigregister
pair_ss_swigregister(pair_ss)

class StrMap(_object):
    """Proxy of C++ std::map<(std::string,std::string)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StrMap, name)
    __repr__ = _swig_repr
    def iterator(self):
        """
        iterator(self) -> SwigPyIterator
        Parameters:
           self: std::map< std::string,std::string > * value




        """
        return _MMCorePy.StrMap_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """
        __nonzero__(self) -> bool
        Parameters:
           self: std::map< std::string,std::string > const * value




        """
        return _MMCorePy.StrMap___nonzero__(self)

    def __bool__(self):
        """
        __bool__(self) -> bool
        Parameters:
           self: std::map< std::string,std::string > const * value




        """
        return _MMCorePy.StrMap___bool__(self)

    def __len__(self):
        """
        __len__(self) -> size_type
        Parameters:
           self: std::map< std::string,std::string > const * value




        """
        return _MMCorePy.StrMap___len__(self)

    def __getitem__(self, *args):
        """
        __getitem__(self, key_type key) -> mapped_type
        Parameters:
           self: std::map< std::string,std::string > const * value
           key: std::map< std::string,std::string >::key_type const & value

           key: std::map< std::string,std::string >::key_type const & value

        """
        return _MMCorePy.StrMap___getitem__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, key_type key)
        Parameters:
           self: std::map< std::string,std::string > * value
           key: std::map< std::string,std::string >::key_type const & value

           key: std::map< std::string,std::string >::key_type const & value

        """
        return _MMCorePy.StrMap___delitem__(self, *args)

    def has_key(self, *args):
        """
        has_key(self, key_type key) -> bool
        Parameters:
           self: std::map< std::string,std::string > const * value
           key: std::map< std::string,std::string >::key_type const & value

           key: std::map< std::string,std::string >::key_type const & value

        """
        return _MMCorePy.StrMap_has_key(self, *args)

    def keys(self):
        """
        keys(self) -> PyObject
        Parameters:
           self: std::map< std::string,std::string > * value




        """
        return _MMCorePy.StrMap_keys(self)

    def values(self):
        """
        values(self) -> PyObject
        Parameters:
           self: std::map< std::string,std::string > * value




        """
        return _MMCorePy.StrMap_values(self)

    def items(self):
        """
        items(self) -> PyObject
        Parameters:
           self: std::map< std::string,std::string > * value




        """
        return _MMCorePy.StrMap_items(self)

    def __contains__(self, *args):
        """
        __contains__(self, key_type key) -> bool
        Parameters:
           self: std::map< std::string,std::string > * value
           key: std::map< std::string,std::string >::key_type const & value

           key: std::map< std::string,std::string >::key_type const & value

        """
        return _MMCorePy.StrMap___contains__(self, *args)

    def key_iterator(self):
        """
        key_iterator(self) -> SwigPyIterator
        Parameters:
           self: std::map< std::string,std::string > * value




        """
        return _MMCorePy.StrMap_key_iterator(self)

    def value_iterator(self):
        """
        value_iterator(self) -> SwigPyIterator
        Parameters:
           self: std::map< std::string,std::string > * value




        """
        return _MMCorePy.StrMap_value_iterator(self)

    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __setitem__(self, *args):
        """
        __setitem__(self, key_type key, mapped_type x)
        Parameters:
           self: std::map< std::string,std::string > * value
           key: std::map< std::string,std::string >::key_type const & value
           x: std::map< std::string,std::string >::mapped_type const & value

           key: std::map< std::string,std::string >::key_type const & value
           x: std::map< std::string,std::string >::mapped_type const & value

        """
        return _MMCorePy.StrMap___setitem__(self, *args)

    def __init__(self, *args): 
        """
        __init__(self, std::less<(std::string)> arg0) -> StrMap
        Parameters:
           : std::less< std::string > const & value

           : std::less< std::string > const & value

        __init__(self) -> StrMap
        __init__(self, StrMap arg0) -> StrMap
        Parameters:
           arg1: std::map< std::string,std::string > const & value

           : std::map< std::string,std::string > const & value

        """
        this = _MMCorePy.new_StrMap(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self):
        """
        empty(self) -> bool
        Parameters:
           self: std::map< std::string,std::string > const * value




        """
        return _MMCorePy.StrMap_empty(self)

    def size(self):
        """
        size(self) -> size_type
        Parameters:
           self: std::map< std::string,std::string > const * value




        """
        return _MMCorePy.StrMap_size(self)

    def clear(self):
        """
        clear(self)
        Parameters:
           self: std::map< std::string,std::string > * value




        """
        return _MMCorePy.StrMap_clear(self)

    def swap(self, *args):
        """
        swap(self, StrMap v)
        Parameters:
           self: std::map< std::string,std::string > * value
           v: std::map< std::string,std::string > & value

           v: std::map< std::string,std::string > & value

        """
        return _MMCorePy.StrMap_swap(self, *args)

    def get_allocator(self):
        """
        get_allocator(self) -> allocator_type
        Parameters:
           self: std::map< std::string,std::string > const * value




        """
        return _MMCorePy.StrMap_get_allocator(self)

    def begin(self):
        """
        begin(self) -> const_iterator
        Parameters:
           self: std::map< std::string,std::string > const * value




        """
        return _MMCorePy.StrMap_begin(self)

    def end(self):
        """
        end(self) -> const_iterator
        Parameters:
           self: std::map< std::string,std::string > const * value




        """
        return _MMCorePy.StrMap_end(self)

    def rbegin(self):
        """
        rbegin(self) -> const_reverse_iterator
        Parameters:
           self: std::map< std::string,std::string > const * value




        """
        return _MMCorePy.StrMap_rbegin(self)

    def rend(self):
        """
        rend(self) -> const_reverse_iterator
        Parameters:
           self: std::map< std::string,std::string > const * value




        """
        return _MMCorePy.StrMap_rend(self)

    def count(self, *args):
        """
        count(self, key_type x) -> size_type
        Parameters:
           self: std::map< std::string,std::string > const * value
           x: std::map< std::string,std::string >::key_type const & value

           x: std::map< std::string,std::string >::key_type const & value

        """
        return _MMCorePy.StrMap_count(self, *args)

    def erase(self, *args):
        """
        erase(self, key_type x) -> size_type
        Parameters:
           x: std::map< std::string,std::string >::key_type const & value

           x: std::map< std::string,std::string >::key_type const & value

        erase(self, iterator position)
        Parameters:
           position: std::map< std::string,std::string >::iterator value

           position: std::map< std::string,std::string >::iterator value

        erase(self, iterator first, iterator last)
        Parameters:
           self: std::map< std::string,std::string > * value
           first: std::map< std::string,std::string >::iterator value
           last: std::map< std::string,std::string >::iterator value

           first: std::map< std::string,std::string >::iterator value
           last: std::map< std::string,std::string >::iterator value

        """
        return _MMCorePy.StrMap_erase(self, *args)

    def find(self, *args):
        """
        find(self, key_type x) -> iterator
        Parameters:
           self: std::map< std::string,std::string > * value
           x: std::map< std::string,std::string >::key_type const & value

           x: std::map< std::string,std::string >::key_type const & value

        """
        return _MMCorePy.StrMap_find(self, *args)

    def lower_bound(self, *args):
        """
        lower_bound(self, key_type x) -> iterator
        Parameters:
           self: std::map< std::string,std::string > * value
           x: std::map< std::string,std::string >::key_type const & value

           x: std::map< std::string,std::string >::key_type const & value

        """
        return _MMCorePy.StrMap_lower_bound(self, *args)

    def upper_bound(self, *args):
        """
        upper_bound(self, key_type x) -> iterator
        Parameters:
           self: std::map< std::string,std::string > * value
           x: std::map< std::string,std::string >::key_type const & value

           x: std::map< std::string,std::string >::key_type const & value

        """
        return _MMCorePy.StrMap_upper_bound(self, *args)

    __swig_destroy__ = _MMCorePy.delete_StrMap
    __del__ = lambda self : None;
StrMap_swigregister = _MMCorePy.StrMap_swigregister
StrMap_swigregister(StrMap)

MM_CODE_OK = _MMCorePy.MM_CODE_OK
MM_CODE_ERR = _MMCorePy.MM_CODE_ERR
DEVICE_OK = _MMCorePy.DEVICE_OK
DEVICE_ERR = _MMCorePy.DEVICE_ERR
DEVICE_INVALID_PROPERTY = _MMCorePy.DEVICE_INVALID_PROPERTY
DEVICE_INVALID_PROPERTY_VALUE = _MMCorePy.DEVICE_INVALID_PROPERTY_VALUE
DEVICE_DUPLICATE_PROPERTY = _MMCorePy.DEVICE_DUPLICATE_PROPERTY
DEVICE_INVALID_PROPERTY_TYPE = _MMCorePy.DEVICE_INVALID_PROPERTY_TYPE
DEVICE_NATIVE_MODULE_FAILED = _MMCorePy.DEVICE_NATIVE_MODULE_FAILED
DEVICE_UNSUPPORTED_DATA_FORMAT = _MMCorePy.DEVICE_UNSUPPORTED_DATA_FORMAT
DEVICE_INTERNAL_INCONSISTENCY = _MMCorePy.DEVICE_INTERNAL_INCONSISTENCY
DEVICE_NOT_SUPPORTED = _MMCorePy.DEVICE_NOT_SUPPORTED
DEVICE_UNKNOWN_LABEL = _MMCorePy.DEVICE_UNKNOWN_LABEL
DEVICE_UNSUPPORTED_COMMAND = _MMCorePy.DEVICE_UNSUPPORTED_COMMAND
DEVICE_UNKNOWN_POSITION = _MMCorePy.DEVICE_UNKNOWN_POSITION
DEVICE_NO_CALLBACK_REGISTERED = _MMCorePy.DEVICE_NO_CALLBACK_REGISTERED
DEVICE_SERIAL_COMMAND_FAILED = _MMCorePy.DEVICE_SERIAL_COMMAND_FAILED
DEVICE_SERIAL_BUFFER_OVERRUN = _MMCorePy.DEVICE_SERIAL_BUFFER_OVERRUN
DEVICE_SERIAL_INVALID_RESPONSE = _MMCorePy.DEVICE_SERIAL_INVALID_RESPONSE
DEVICE_SERIAL_TIMEOUT = _MMCorePy.DEVICE_SERIAL_TIMEOUT
DEVICE_SELF_REFERENCE = _MMCorePy.DEVICE_SELF_REFERENCE
DEVICE_NO_PROPERTY_DATA = _MMCorePy.DEVICE_NO_PROPERTY_DATA
DEVICE_DUPLICATE_LABEL = _MMCorePy.DEVICE_DUPLICATE_LABEL
DEVICE_INVALID_INPUT_PARAM = _MMCorePy.DEVICE_INVALID_INPUT_PARAM
DEVICE_BUFFER_OVERFLOW = _MMCorePy.DEVICE_BUFFER_OVERFLOW
DEVICE_NONEXISTENT_CHANNEL = _MMCorePy.DEVICE_NONEXISTENT_CHANNEL
DEVICE_INVALID_PROPERTY_LIMTS = _MMCorePy.DEVICE_INVALID_PROPERTY_LIMTS
DEVICE_SNAP_IMAGE_FAILED = _MMCorePy.DEVICE_SNAP_IMAGE_FAILED
DEVICE_IMAGE_PARAMS_FAILED = _MMCorePy.DEVICE_IMAGE_PARAMS_FAILED
DEVICE_CORE_FOCUS_STAGE_UNDEF = _MMCorePy.DEVICE_CORE_FOCUS_STAGE_UNDEF
DEVICE_CORE_EXPOSURE_FAILED = _MMCorePy.DEVICE_CORE_EXPOSURE_FAILED
DEVICE_CORE_CONFIG_FAILED = _MMCorePy.DEVICE_CORE_CONFIG_FAILED
DEVICE_CAMERA_BUSY_ACQUIRING = _MMCorePy.DEVICE_CAMERA_BUSY_ACQUIRING
DEVICE_INCOMPATIBLE_IMAGE = _MMCorePy.DEVICE_INCOMPATIBLE_IMAGE
DEVICE_CAN_NOT_SET_PROPERTY = _MMCorePy.DEVICE_CAN_NOT_SET_PROPERTY
DEVICE_CORE_CHANNEL_PRESETS_FAILED = _MMCorePy.DEVICE_CORE_CHANNEL_PRESETS_FAILED
DEVICE_LOCALLY_DEFINED_ERROR = _MMCorePy.DEVICE_LOCALLY_DEFINED_ERROR
DEVICE_NOT_CONNECTED = _MMCorePy.DEVICE_NOT_CONNECTED
DEVICE_COMM_HUB_MISSING = _MMCorePy.DEVICE_COMM_HUB_MISSING
DEVICE_DUPLICATE_LIBRARY = _MMCorePy.DEVICE_DUPLICATE_LIBRARY
DEVICE_PROPERTY_NOT_SEQUENCEABLE = _MMCorePy.DEVICE_PROPERTY_NOT_SEQUENCEABLE
DEVICE_SEQUENCE_TOO_LARGE = _MMCorePy.DEVICE_SEQUENCE_TOO_LARGE
DEVICE_OUT_OF_MEMORY = _MMCorePy.DEVICE_OUT_OF_MEMORY
DEVICE_NOT_YET_IMPLEMENTED = _MMCorePy.DEVICE_NOT_YET_IMPLEMENTED
UnknownType = _MMCorePy.UnknownType
AnyType = _MMCorePy.AnyType
CameraDevice = _MMCorePy.CameraDevice
ShutterDevice = _MMCorePy.ShutterDevice
StateDevice = _MMCorePy.StateDevice
StageDevice = _MMCorePy.StageDevice
XYStageDevice = _MMCorePy.XYStageDevice
SerialDevice = _MMCorePy.SerialDevice
GenericDevice = _MMCorePy.GenericDevice
AutoFocusDevice = _MMCorePy.AutoFocusDevice
CoreDevice = _MMCorePy.CoreDevice
ImageProcessorDevice = _MMCorePy.ImageProcessorDevice
SignalIODevice = _MMCorePy.SignalIODevice
MagnifierDevice = _MMCorePy.MagnifierDevice
SLMDevice = _MMCorePy.SLMDevice
HubDevice = _MMCorePy.HubDevice
GalvoDevice = _MMCorePy.GalvoDevice
Undef = _MMCorePy.Undef
String = _MMCorePy.String
Float = _MMCorePy.Float
Integer = _MMCorePy.Integer
NoAction = _MMCorePy.NoAction
BeforeGet = _MMCorePy.BeforeGet
AfterSet = _MMCorePy.AfterSet
IsSequenceable = _MMCorePy.IsSequenceable
AfterLoadSequence = _MMCorePy.AfterLoadSequence
StartSequence = _MMCorePy.StartSequence
StopSequence = _MMCorePy.StopSequence
InvalidPort = _MMCorePy.InvalidPort
SerialPort = _MMCorePy.SerialPort
USBPort = _MMCorePy.USBPort
HIDPort = _MMCorePy.HIDPort
FocusDirectionUnknown = _MMCorePy.FocusDirectionUnknown
FocusDirectionTowardSample = _MMCorePy.FocusDirectionTowardSample
FocusDirectionAwayFromSample = _MMCorePy.FocusDirectionAwayFromSample
Attention = _MMCorePy.Attention
Done = _MMCorePy.Done
StatusChanged = _MMCorePy.StatusChanged
Unimplemented = _MMCorePy.Unimplemented
Misconfigured = _MMCorePy.Misconfigured
CanNotCommunicate = _MMCorePy.CanNotCommunicate
CanCommunicate = _MMCorePy.CanCommunicate
class CMMError(Exception):
    """Proxy of C++ CMMError class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMMError, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CMMError, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, string msg, Code code = MMERR_GENERIC) -> CMMError
        Parameters:
           msg: std::string const & value
           code: CMMError::Code value

           msg: std::string const & value
           code: CMMError::Code value

        __init__(self, string msg) -> CMMError
        Parameters:
           msg: std::string const & value

           msg: std::string const & value

        __init__(self, char msg, Code code = MMERR_GENERIC) -> CMMError
        Parameters:
           msg: char const * value
           code: CMMError::Code value

           msg: char const * value
           code: CMMError::Code value

        __init__(self, char msg) -> CMMError
        Parameters:
           msg: char const * value

           msg: char const * value

        __init__(self, string msg, Code code, CMMError underlyingError) -> CMMError
        Parameters:
           msg: std::string const & value
           code: CMMError::Code value
           underlyingError: CMMError const & value

           msg: std::string const & value
           code: CMMError::Code value
           underlyingError: CMMError const & value

        __init__(self, char msg, Code code, CMMError underlyingError) -> CMMError
        Parameters:
           msg: char const * value
           code: CMMError::Code value
           underlyingError: CMMError const & value

           msg: char const * value
           code: CMMError::Code value
           underlyingError: CMMError const & value

        __init__(self, string msg, CMMError underlyingError) -> CMMError
        Parameters:
           msg: std::string const & value
           underlyingError: CMMError const & value

           msg: std::string const & value
           underlyingError: CMMError const & value

        __init__(self, char msg, CMMError underlyingError) -> CMMError
        Parameters:
           msg: char const * value
           underlyingError: CMMError const & value

           msg: char const * value
           underlyingError: CMMError const & value

        __init__(self, CMMError other) -> CMMError
        Parameters:
           other: CMMError const & value

           other: CMMError const & value

        """
        this = _MMCorePy.new_CMMError(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MMCorePy.delete_CMMError
    __del__ = lambda self : None;
    def what(self):
        """
        what(self) -> char
        Parameters:
           self: CMMError const * value




        """
        return _MMCorePy.CMMError_what(self)

    def getMsg(self):
        """
        getMsg(self) -> string
        Parameters:
           self: CMMError const * value




        """
        return _MMCorePy.CMMError_getMsg(self)

    def getFullMsg(self):
        """
        getFullMsg(self) -> string
        Parameters:
           self: CMMError const * value




        """
        return _MMCorePy.CMMError_getFullMsg(self)

    def getCode(self):
        """
        getCode(self) -> Code
        Parameters:
           self: CMMError const * value




        """
        return _MMCorePy.CMMError_getCode(self)

    def getSpecificCode(self):
        """
        getSpecificCode(self) -> Code
        Parameters:
           self: CMMError const * value




        """
        return _MMCorePy.CMMError_getSpecificCode(self)

    def getUnderlyingError(self):
        """
        getUnderlyingError(self) -> CMMError
        Parameters:
           self: CMMError const * value




        """
        return _MMCorePy.CMMError_getUnderlyingError(self)

    def __getitem__(self, *args):
        """
        __getitem__(self, int n) -> string
        Parameters:
           self: CMMError * value
           n: int value

           n: int value

        """
        return _MMCorePy.CMMError___getitem__(self, *args)

    def __str__(self):
        """
        __str__(self) -> string
        Parameters:
           self: CMMError * value




        """
        return _MMCorePy.CMMError___str__(self)

CMMError_swigregister = _MMCorePy.CMMError_swigregister
CMMError_swigregister(CMMError)
cvar = _MMCorePy.cvar
MaxStrLength = cvar.MaxStrLength
g_Keyword_Name = cvar.g_Keyword_Name
g_Keyword_Description = cvar.g_Keyword_Description
g_Keyword_CameraName = cvar.g_Keyword_CameraName
g_Keyword_CameraID = cvar.g_Keyword_CameraID
g_Keyword_CameraChannelName = cvar.g_Keyword_CameraChannelName
g_Keyword_CameraChannelIndex = cvar.g_Keyword_CameraChannelIndex
g_Keyword_Binning = cvar.g_Keyword_Binning
g_Keyword_Exposure = cvar.g_Keyword_Exposure
g_Keyword_ActualExposure = cvar.g_Keyword_ActualExposure
g_Keyword_ActualInterval_ms = cvar.g_Keyword_ActualInterval_ms
g_Keyword_Interval_ms = cvar.g_Keyword_Interval_ms
g_Keyword_Elapsed_Time_ms = cvar.g_Keyword_Elapsed_Time_ms
g_Keyword_PixelType = cvar.g_Keyword_PixelType
g_Keyword_ReadoutTime = cvar.g_Keyword_ReadoutTime
g_Keyword_ReadoutMode = cvar.g_Keyword_ReadoutMode
g_Keyword_Gain = cvar.g_Keyword_Gain
g_Keyword_EMGain = cvar.g_Keyword_EMGain
g_Keyword_Offset = cvar.g_Keyword_Offset
g_Keyword_CCDTemperature = cvar.g_Keyword_CCDTemperature
g_Keyword_CCDTemperatureSetPoint = cvar.g_Keyword_CCDTemperatureSetPoint
g_Keyword_State = cvar.g_Keyword_State
g_Keyword_Label = cvar.g_Keyword_Label
g_Keyword_Position = cvar.g_Keyword_Position
g_Keyword_Type = cvar.g_Keyword_Type
g_Keyword_Delay = cvar.g_Keyword_Delay
g_Keyword_BaudRate = cvar.g_Keyword_BaudRate
g_Keyword_DataBits = cvar.g_Keyword_DataBits
g_Keyword_StopBits = cvar.g_Keyword_StopBits
g_Keyword_Parity = cvar.g_Keyword_Parity
g_Keyword_Handshaking = cvar.g_Keyword_Handshaking
g_Keyword_DelayBetweenCharsMs = cvar.g_Keyword_DelayBetweenCharsMs
g_Keyword_Port = cvar.g_Keyword_Port
g_Keyword_AnswerTimeout = cvar.g_Keyword_AnswerTimeout
g_Keyword_Speed = cvar.g_Keyword_Speed
g_Keyword_CoreDevice = cvar.g_Keyword_CoreDevice
g_Keyword_CoreInitialize = cvar.g_Keyword_CoreInitialize
g_Keyword_CoreCamera = cvar.g_Keyword_CoreCamera
g_Keyword_CoreShutter = cvar.g_Keyword_CoreShutter
g_Keyword_CoreXYStage = cvar.g_Keyword_CoreXYStage
g_Keyword_CoreFocus = cvar.g_Keyword_CoreFocus
g_Keyword_CoreAutoFocus = cvar.g_Keyword_CoreAutoFocus
g_Keyword_CoreAutoShutter = cvar.g_Keyword_CoreAutoShutter
g_Keyword_CoreChannelGroup = cvar.g_Keyword_CoreChannelGroup
g_Keyword_CoreImageProcessor = cvar.g_Keyword_CoreImageProcessor
g_Keyword_CoreSLM = cvar.g_Keyword_CoreSLM
g_Keyword_CoreGalvo = cvar.g_Keyword_CoreGalvo
g_Keyword_CoreTimeoutMs = cvar.g_Keyword_CoreTimeoutMs
g_Keyword_Channel = cvar.g_Keyword_Channel
g_Keyword_Version = cvar.g_Keyword_Version
g_Keyword_ColorMode = cvar.g_Keyword_ColorMode
g_Keyword_Transpose_SwapXY = cvar.g_Keyword_Transpose_SwapXY
g_Keyword_Transpose_MirrorX = cvar.g_Keyword_Transpose_MirrorX
g_Keyword_Transpose_MirrorY = cvar.g_Keyword_Transpose_MirrorY
g_Keyword_Transpose_Correction = cvar.g_Keyword_Transpose_Correction
g_Keyword_Closed_Position = cvar.g_Keyword_Closed_Position
g_Keyword_HubID = cvar.g_Keyword_HubID
g_Keyword_Meatdata_Exposure = cvar.g_Keyword_Meatdata_Exposure
g_Keyword_Metadata_Score = cvar.g_Keyword_Metadata_Score
g_Keyword_Metadata_ImageNumber = cvar.g_Keyword_Metadata_ImageNumber
g_Keyword_Metadata_StartTime = cvar.g_Keyword_Metadata_StartTime
g_Keyword_Metadata_ROI_X = cvar.g_Keyword_Metadata_ROI_X
g_Keyword_Metadata_ROI_Y = cvar.g_Keyword_Metadata_ROI_Y
g_FieldDelimiters = cvar.g_FieldDelimiters
g_CFGCommand_Device = cvar.g_CFGCommand_Device
g_CFGCommand_Label = cvar.g_CFGCommand_Label
g_CFGCommand_Property = cvar.g_CFGCommand_Property
g_CFGCommand_Configuration = cvar.g_CFGCommand_Configuration
g_CFGCommand_ConfigGroup = cvar.g_CFGCommand_ConfigGroup
g_CFGCommand_Equipment = cvar.g_CFGCommand_Equipment
g_CFGCommand_Delay = cvar.g_CFGCommand_Delay
g_CFGCommand_ImageSynchro = cvar.g_CFGCommand_ImageSynchro
g_CFGCommand_ConfigPixelSize = cvar.g_CFGCommand_ConfigPixelSize
g_CFGCommand_PixelSize_um = cvar.g_CFGCommand_PixelSize_um
g_CFGCommand_ParentID = cvar.g_CFGCommand_ParentID
g_CFGCommand_FocusDirection = cvar.g_CFGCommand_FocusDirection
g_CFGGroup_System = cvar.g_CFGGroup_System
g_CFGGroup_System_Startup = cvar.g_CFGGroup_System_Startup
g_CFGGroup_System_Shutdown = cvar.g_CFGGroup_System_Shutdown
g_CFGGroup_PixelSizeUm = cvar.g_CFGGroup_PixelSizeUm
_DATABITS_5 = cvar._DATABITS_5
_DATABITS_6 = cvar._DATABITS_6
_DATABITS_7 = cvar._DATABITS_7
_DATABITS_8 = cvar._DATABITS_8
_FLOWCONTROL_NONE = cvar._FLOWCONTROL_NONE
_FLOWCONTROL_RTSCTS_IN = cvar._FLOWCONTROL_RTSCTS_IN
_FLOWCONTROL_RTSCTS_OUT = cvar._FLOWCONTROL_RTSCTS_OUT
_FLOWCONTROL_XONXOFF_IN = cvar._FLOWCONTROL_XONXOFF_IN
_FLOWCONTROL_XONXOFF_OUT = cvar._FLOWCONTROL_XONXOFF_OUT
_PARITY_EVEN = cvar._PARITY_EVEN
_PARITY_MARK = cvar._PARITY_MARK
_PARITY_NONE = cvar._PARITY_NONE
_PARITY_ODD = cvar._PARITY_ODD
_PARITY_SPACE = cvar._PARITY_SPACE
_STOPBITS_1 = cvar._STOPBITS_1
_STOPBITS_1_5 = cvar._STOPBITS_1_5
_STOPBITS_2 = cvar._STOPBITS_2

class PropertySetting(_object):
    """Proxy of C++ PropertySetting class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PropertySetting, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PropertySetting, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, char deviceLabel, char prop, char value, bool readOnly = False) -> PropertySetting
        Parameters:
           deviceLabel: char const * value
           prop: char const * value
           value: char const * value
           readOnly: bool value

           deviceLabel: char const * value
           prop: char const * value
           value: char const * value
           readOnly: bool value

        __init__(self, char deviceLabel, char prop, char value) -> PropertySetting
        Parameters:
           deviceLabel: char const * value
           prop: char const * value
           value: char const * value

           deviceLabel: char const * value
           prop: char const * value
           value: char const * value

        __init__(self) -> PropertySetting
        """
        this = _MMCorePy.new_PropertySetting(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MMCorePy.delete_PropertySetting
    __del__ = lambda self : None;
    def getDeviceLabel(self):
        """
        getDeviceLabel(self) -> string
        Parameters:
           self: PropertySetting const * value




        """
        return _MMCorePy.PropertySetting_getDeviceLabel(self)

    def getPropertyName(self):
        """
        getPropertyName(self) -> string
        Parameters:
           self: PropertySetting const * value




        """
        return _MMCorePy.PropertySetting_getPropertyName(self)

    def getReadOnly(self):
        """
        getReadOnly(self) -> bool
        Parameters:
           self: PropertySetting const * value




        """
        return _MMCorePy.PropertySetting_getReadOnly(self)

    def getPropertyValue(self):
        """
        getPropertyValue(self) -> string
        Parameters:
           self: PropertySetting const * value




        """
        return _MMCorePy.PropertySetting_getPropertyValue(self)

    def getKey(self):
        """
        getKey(self) -> string
        Parameters:
           self: PropertySetting const * value




        """
        return _MMCorePy.PropertySetting_getKey(self)

    def generateKey(*args):
        """
        generateKey(char device, char prop) -> string
        Parameters:
           device: char const * value
           prop: char const * value

           device: char const * value
           prop: char const * value

           device: char const * value
           prop: char const * value

        """
        return _MMCorePy.PropertySetting_generateKey(*args)

    if _newclass:generateKey = staticmethod(generateKey)
    __swig_getmethods__["generateKey"] = lambda x: generateKey
    def getVerbose(self):
        """
        getVerbose(self) -> string
        Parameters:
           self: PropertySetting const * value




        """
        return _MMCorePy.PropertySetting_getVerbose(self)

    def isEqualTo(self, *args):
        """
        isEqualTo(self, PropertySetting ps) -> bool
        Parameters:
           self: PropertySetting * value
           ps: PropertySetting const & value

           ps: PropertySetting const & value

        """
        return _MMCorePy.PropertySetting_isEqualTo(self, *args)

PropertySetting_swigregister = _MMCorePy.PropertySetting_swigregister
PropertySetting_swigregister(PropertySetting)

def PropertySetting_generateKey(*args):
  """
    PropertySetting_generateKey(char device, char prop) -> string
    Parameters:
       device: char const * value
       prop: char const * value

       device: char const * value
       prop: char const * value

    """
  return _MMCorePy.PropertySetting_generateKey(*args)

class PropertyPair(_object):
    """Proxy of C++ PropertyPair class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PropertyPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PropertyPair, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, char prop, char value) -> PropertyPair
        Parameters:
           prop: char const * value
           value: char const * value

           prop: char const * value
           value: char const * value

        __init__(self) -> PropertyPair
        """
        this = _MMCorePy.new_PropertyPair(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MMCorePy.delete_PropertyPair
    __del__ = lambda self : None;
    def getPropertyName(self):
        """
        getPropertyName(self) -> string
        Parameters:
           self: PropertyPair const * value




        """
        return _MMCorePy.PropertyPair_getPropertyName(self)

    def getPropertyValue(self):
        """
        getPropertyValue(self) -> string
        Parameters:
           self: PropertyPair const * value




        """
        return _MMCorePy.PropertyPair_getPropertyValue(self)

PropertyPair_swigregister = _MMCorePy.PropertyPair_swigregister
PropertyPair_swigregister(PropertyPair)

class Configuration(_object):
    """Proxy of C++ Configuration class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Configuration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Configuration, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> Configuration"""
        this = _MMCorePy.new_Configuration()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MMCorePy.delete_Configuration
    __del__ = lambda self : None;
    def addSetting(self, *args):
        """
        addSetting(self, PropertySetting setting)
        Parameters:
           self: Configuration * value
           setting: PropertySetting const & value

           setting: PropertySetting const & value

        """
        return _MMCorePy.Configuration_addSetting(self, *args)

    def deleteSetting(self, *args):
        """
        deleteSetting(self, char device, char prop)
        Parameters:
           self: Configuration * value
           device: char const * value
           prop: char const * value

           device: char const * value
           prop: char const * value

        """
        return _MMCorePy.Configuration_deleteSetting(self, *args)

    def isPropertyIncluded(self, *args):
        """
        isPropertyIncluded(self, char device, char property) -> bool
        Parameters:
           self: Configuration * value
           device: char const * value
           property: char const * value

           device: char const * value
           property: char const * value

        """
        return _MMCorePy.Configuration_isPropertyIncluded(self, *args)

    def isSettingIncluded(self, *args):
        """
        isSettingIncluded(self, PropertySetting ps) -> bool
        Parameters:
           self: Configuration * value
           ps: PropertySetting const & value

           ps: PropertySetting const & value

        """
        return _MMCorePy.Configuration_isSettingIncluded(self, *args)

    def isConfigurationIncluded(self, *args):
        """
        isConfigurationIncluded(self, Configuration cfg) -> bool
        Parameters:
           self: Configuration * value
           cfg: Configuration const & value

           cfg: Configuration const & value

        """
        return _MMCorePy.Configuration_isConfigurationIncluded(self, *args)

    def getSetting(self, *args):
        """
        getSetting(self, size_t index) -> PropertySetting
        Parameters:
           index: size_t value

           index: size_t value

        getSetting(self, char device, char prop) -> PropertySetting
        Parameters:
           self: Configuration * value
           device: char const * value
           prop: char const * value

           device: char const * value
           prop: char const * value

        """
        return _MMCorePy.Configuration_getSetting(self, *args)

    def size(self):
        """
        size(self) -> size_t
        Parameters:
           self: Configuration const * value




        """
        return _MMCorePy.Configuration_size(self)

    def getVerbose(self):
        """
        getVerbose(self) -> string
        Parameters:
           self: Configuration const * value




        """
        return _MMCorePy.Configuration_getVerbose(self)

Configuration_swigregister = _MMCorePy.Configuration_swigregister
Configuration_swigregister(Configuration)

class PropertyBlock(_object):
    """Proxy of C++ PropertyBlock class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PropertyBlock, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PropertyBlock, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> PropertyBlock"""
        this = _MMCorePy.new_PropertyBlock()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MMCorePy.delete_PropertyBlock
    __del__ = lambda self : None;
    def addPair(self, *args):
        """
        addPair(self, PropertyPair pair)
        Parameters:
           self: PropertyBlock * value
           pair: PropertyPair const & value

           pair: PropertyPair const & value

        """
        return _MMCorePy.PropertyBlock_addPair(self, *args)

    def getPair(self, *args):
        """
        getPair(self, size_t index) -> PropertyPair
        Parameters:
           self: PropertyBlock const * value
           index: size_t value

           index: size_t value

        """
        return _MMCorePy.PropertyBlock_getPair(self, *args)

    def size(self):
        """
        size(self) -> size_t
        Parameters:
           self: PropertyBlock const * value




        """
        return _MMCorePy.PropertyBlock_size(self)

    def getValue(self, *args):
        """
        getValue(self, char key) -> string
        Parameters:
           self: PropertyBlock const * value
           key: char const * value

           key: char const * value

        """
        return _MMCorePy.PropertyBlock_getValue(self, *args)

PropertyBlock_swigregister = _MMCorePy.PropertyBlock_swigregister
PropertyBlock_swigregister(PropertyBlock)

class CMMCore(_object):
    """Proxy of C++ CMMCore class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMMCore, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CMMCore, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> CMMCore"""
        this = _MMCorePy.new_CMMCore()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MMCorePy.delete_CMMCore
    __del__ = lambda self : None;
    def noop():
        """noop()"""
        return _MMCorePy.CMMCore_noop()

    if _newclass:noop = staticmethod(noop)
    __swig_getmethods__["noop"] = lambda x: noop
    def loadDevice(self, *args):
        """
        loadDevice(self, char label, char moduleName, char deviceName)
        Parameters:
           self: CMMCore * value
           label: char const * value
           moduleName: char const * value
           deviceName: char const * value

           label: char const * value
           moduleName: char const * value
           deviceName: char const * value

        """
        return _MMCorePy.CMMCore_loadDevice(self, *args)

    def unloadDevice(self, *args):
        """
        unloadDevice(self, char label)
        Parameters:
           self: CMMCore * value
           label: char const * value

           label: char const * value

        """
        return _MMCorePy.CMMCore_unloadDevice(self, *args)

    def unloadAllDevices(self):
        """
        unloadAllDevices(self)
        Parameters:
           self: CMMCore * value




        """
        return _MMCorePy.CMMCore_unloadAllDevices(self)

    def initializeAllDevices(self):
        """
        initializeAllDevices(self)
        Parameters:
           self: CMMCore * value




        """
        return _MMCorePy.CMMCore_initializeAllDevices(self)

    def initializeDevice(self, *args):
        """
        initializeDevice(self, char label)
        Parameters:
           self: CMMCore * value
           label: char const * value

           label: char const * value

        """
        return _MMCorePy.CMMCore_initializeDevice(self, *args)

    def reset(self):
        """
        reset(self)
        Parameters:
           self: CMMCore * value




        """
        return _MMCorePy.CMMCore_reset(self)

    def unloadLibrary(self, *args):
        """
        unloadLibrary(self, char moduleName)
        Parameters:
           self: CMMCore * value
           moduleName: char const * value

           moduleName: char const * value

        """
        return _MMCorePy.CMMCore_unloadLibrary(self, *args)

    def updateCoreProperties(self):
        """
        updateCoreProperties(self)
        Parameters:
           self: CMMCore * value




        """
        return _MMCorePy.CMMCore_updateCoreProperties(self)

    def getCoreErrorText(self, *args):
        """
        getCoreErrorText(self, int code) -> string
        Parameters:
           self: CMMCore const * value
           code: int value

           code: int value

        """
        return _MMCorePy.CMMCore_getCoreErrorText(self, *args)

    def getVersionInfo(self):
        """
        getVersionInfo(self) -> string
        Parameters:
           self: CMMCore const * value




        """
        return _MMCorePy.CMMCore_getVersionInfo(self)

    def getAPIVersionInfo(self):
        """
        getAPIVersionInfo(self) -> string
        Parameters:
           self: CMMCore const * value




        """
        return _MMCorePy.CMMCore_getAPIVersionInfo(self)

    def getSystemState(self):
        """
        getSystemState(self) -> Configuration
        Parameters:
           self: CMMCore * value




        """
        return _MMCorePy.CMMCore_getSystemState(self)

    def setSystemState(self, *args):
        """
        setSystemState(self, Configuration conf)
        Parameters:
           self: CMMCore * value
           conf: Configuration const & value

           conf: Configuration const & value

        """
        return _MMCorePy.CMMCore_setSystemState(self, *args)

    def getConfigState(self, *args):
        """
        getConfigState(self, char group, char config) -> Configuration
        Parameters:
           self: CMMCore * value
           group: char const * value
           config: char const * value

           group: char const * value
           config: char const * value

        """
        return _MMCorePy.CMMCore_getConfigState(self, *args)

    def getConfigGroupState(self, *args):
        """
        getConfigGroupState(self, char group) -> Configuration
        Parameters:
           self: CMMCore * value
           group: char const * value

           group: char const * value

        """
        return _MMCorePy.CMMCore_getConfigGroupState(self, *args)

    def saveSystemState(self, *args):
        """
        saveSystemState(self, char fileName)
        Parameters:
           self: CMMCore * value
           fileName: char const * value

           fileName: char const * value

        """
        return _MMCorePy.CMMCore_saveSystemState(self, *args)

    def loadSystemState(self, *args):
        """
        loadSystemState(self, char fileName)
        Parameters:
           self: CMMCore * value
           fileName: char const * value

           fileName: char const * value

        """
        return _MMCorePy.CMMCore_loadSystemState(self, *args)

    def saveSystemConfiguration(self, *args):
        """
        saveSystemConfiguration(self, char fileName)
        Parameters:
           self: CMMCore * value
           fileName: char const * value

           fileName: char const * value

        """
        return _MMCorePy.CMMCore_saveSystemConfiguration(self, *args)

    def loadSystemConfiguration(self, *args):
        """
        loadSystemConfiguration(self, char fileName)
        Parameters:
           self: CMMCore * value
           fileName: char const * value

           fileName: char const * value

        """
        return _MMCorePy.CMMCore_loadSystemConfiguration(self, *args)

    def registerCallback(self, *args):
        """
        registerCallback(self, MMEventCallback cb)
        Parameters:
           self: CMMCore * value
           cb: MMEventCallback * value

           cb: MMEventCallback * value

        """
        return _MMCorePy.CMMCore_registerCallback(self, *args)

    def setPrimaryLogFile(self, *args):
        """
        setPrimaryLogFile(self, char filename, bool truncate = False)
        Parameters:
           filename: char const * value
           truncate: bool value

           filename: char const * value
           truncate: bool value

        setPrimaryLogFile(self, char filename)
        Parameters:
           self: CMMCore * value
           filename: char const * value

           filename: char const * value

        """
        return _MMCorePy.CMMCore_setPrimaryLogFile(self, *args)

    def getPrimaryLogFile(self):
        """
        getPrimaryLogFile(self) -> string
        Parameters:
           self: CMMCore const * value




        """
        return _MMCorePy.CMMCore_getPrimaryLogFile(self)

    def logMessage(self, *args):
        """
        logMessage(self, char msg)
        Parameters:
           msg: char const * value

           msg: char const * value

        logMessage(self, char msg, bool debugOnly)
        Parameters:
           self: CMMCore * value
           msg: char const * value
           debugOnly: bool value

           msg: char const * value
           debugOnly: bool value

        """
        return _MMCorePy.CMMCore_logMessage(self, *args)

    def enableDebugLog(self, *args):
        """
        enableDebugLog(self, bool enable)
        Parameters:
           self: CMMCore * value
           enable: bool value

           enable: bool value

        """
        return _MMCorePy.CMMCore_enableDebugLog(self, *args)

    def debugLogEnabled(self):
        """
        debugLogEnabled(self) -> bool
        Parameters:
           self: CMMCore * value




        """
        return _MMCorePy.CMMCore_debugLogEnabled(self)

    def enableStderrLog(self, *args):
        """
        enableStderrLog(self, bool enable)
        Parameters:
           self: CMMCore * value
           enable: bool value

           enable: bool value

        """
        return _MMCorePy.CMMCore_enableStderrLog(self, *args)

    def stderrLogEnabled(self):
        """
        stderrLogEnabled(self) -> bool
        Parameters:
           self: CMMCore * value




        """
        return _MMCorePy.CMMCore_stderrLogEnabled(self)

    def startSecondaryLogFile(self, *args):
        """
        startSecondaryLogFile(self, char filename, bool enableDebug, bool truncate = True, 
            bool synchronous = False) -> int
        Parameters:
           filename: char const * value
           enableDebug: bool value
           truncate: bool value
           synchronous: bool value

           filename: char const * value
           enableDebug: bool value
           truncate: bool value
           synchronous: bool value

        startSecondaryLogFile(self, char filename, bool enableDebug, bool truncate = True) -> int
        Parameters:
           filename: char const * value
           enableDebug: bool value
           truncate: bool value

           filename: char const * value
           enableDebug: bool value
           truncate: bool value

        startSecondaryLogFile(self, char filename, bool enableDebug) -> int
        Parameters:
           self: CMMCore * value
           filename: char const * value
           enableDebug: bool value

           filename: char const * value
           enableDebug: bool value

        """
        return _MMCorePy.CMMCore_startSecondaryLogFile(self, *args)

    def stopSecondaryLogFile(self, *args):
        """
        stopSecondaryLogFile(self, int handle)
        Parameters:
           self: CMMCore * value
           handle: int value

           handle: int value

        """
        return _MMCorePy.CMMCore_stopSecondaryLogFile(self, *args)

    def getDeviceAdapterSearchPaths(self):
        """
        getDeviceAdapterSearchPaths(self) -> StrVector
        Parameters:
           self: CMMCore * value




        """
        return _MMCorePy.CMMCore_getDeviceAdapterSearchPaths(self)

    def setDeviceAdapterSearchPaths(self, *args):
        """
        setDeviceAdapterSearchPaths(self, StrVector paths)
        Parameters:
           self: CMMCore * value
           paths: std::vector< std::string,std::allocator< std::string > > const & value

           paths: std::vector< std::string,std::allocator< std::string > > const & value

        """
        return _MMCorePy.CMMCore_setDeviceAdapterSearchPaths(self, *args)

    def addSearchPath(*args):
        """
        addSearchPath(char path)
        Parameters:
           path: char const * value

           path: char const * value

           path: char const * value

        """
        return _MMCorePy.CMMCore_addSearchPath(*args)

    if _newclass:addSearchPath = staticmethod(addSearchPath)
    __swig_getmethods__["addSearchPath"] = lambda x: addSearchPath
    def getDeviceAdapterNames(self):
        """
        getDeviceAdapterNames(self) -> StrVector
        Parameters:
           self: CMMCore * value




        """
        return _MMCorePy.CMMCore_getDeviceAdapterNames(self)

    def getDeviceLibraries():
        """getDeviceLibraries() -> StrVector"""
        return _MMCorePy.CMMCore_getDeviceLibraries()

    if _newclass:getDeviceLibraries = staticmethod(getDeviceLibraries)
    __swig_getmethods__["getDeviceLibraries"] = lambda x: getDeviceLibraries
    def getAvailableDevices(self, *args):
        """
        getAvailableDevices(self, char library) -> StrVector
        Parameters:
           self: CMMCore * value
           library: char const * value

           library: char const * value

        """
        return _MMCorePy.CMMCore_getAvailableDevices(self, *args)

    def getAvailableDeviceDescriptions(self, *args):
        """
        getAvailableDeviceDescriptions(self, char library) -> StrVector
        Parameters:
           self: CMMCore * value
           library: char const * value

           library: char const * value

        """
        return _MMCorePy.CMMCore_getAvailableDeviceDescriptions(self, *args)

    def getAvailableDeviceTypes(self, *args):
        """
        getAvailableDeviceTypes(self, char library) -> LongVector
        Parameters:
           self: CMMCore * value
           library: char const * value

           library: char const * value

        """
        return _MMCorePy.CMMCore_getAvailableDeviceTypes(self, *args)

    def getLoadedDevices(self):
        """
        getLoadedDevices(self) -> StrVector
        Parameters:
           self: CMMCore const * value




        """
        return _MMCorePy.CMMCore_getLoadedDevices(self)

    def getLoadedDevicesOfType(self, *args):
        """
        getLoadedDevicesOfType(self, DeviceType devType) -> StrVector
        Parameters:
           self: CMMCore const * value
           devType: enum MM::DeviceType value

           devType: enum MM::DeviceType value

        """
        return _MMCorePy.CMMCore_getLoadedDevicesOfType(self, *args)

    def getDeviceType(self, *args):
        """
        getDeviceType(self, char label) -> DeviceType
        Parameters:
           self: CMMCore * value
           label: char const * value

           label: char const * value

        """
        return _MMCorePy.CMMCore_getDeviceType(self, *args)

    def getDeviceLibrary(self, *args):
        """
        getDeviceLibrary(self, char label) -> string
        Parameters:
           self: CMMCore * value
           label: char const * value

           label: char const * value

        """
        return _MMCorePy.CMMCore_getDeviceLibrary(self, *args)

    def getDeviceName(self, *args):
        """
        getDeviceName(self, char label) -> string
        Parameters:
           self: CMMCore * value
           label: char const * value

           label: char const * value

        """
        return _MMCorePy.CMMCore_getDeviceName(self, *args)

    def getDeviceDescription(self, *args):
        """
        getDeviceDescription(self, char label) -> string
        Parameters:
           self: CMMCore * value
           label: char const * value

           label: char const * value

        """
        return _MMCorePy.CMMCore_getDeviceDescription(self, *args)

    def getDevicePropertyNames(self, *args):
        """
        getDevicePropertyNames(self, char label) -> StrVector
        Parameters:
           self: CMMCore * value
           label: char const * value

           label: char const * value

        """
        return _MMCorePy.CMMCore_getDevicePropertyNames(self, *args)

    def hasProperty(self, *args):
        """
        hasProperty(self, char label, char propName) -> bool
        Parameters:
           self: CMMCore * value
           label: char const * value
           propName: char const * value

           label: char const * value
           propName: char const * value

        """
        return _MMCorePy.CMMCore_hasProperty(self, *args)

    def getProperty(self, *args):
        """
        getProperty(self, char label, char propName) -> string
        Parameters:
           self: CMMCore * value
           label: char const * value
           propName: char const * value

           label: char const * value
           propName: char const * value

        """
        return _MMCorePy.CMMCore_getProperty(self, *args)

    def setProperty(self, *args):
        """
        setProperty(self, char label, char propName, char propValue)
        Parameters:
           label: char const * value
           propName: char const * value
           propValue: char const * value

           label: char const * value
           propName: char const * value
           propValue: char const * value

        setProperty(self, char label, char propName, bool propValue)
        Parameters:
           label: char const * value
           propName: char const * value
           propValue: bool const value

           label: char const * value
           propName: char const * value
           propValue: bool const value

        setProperty(self, char label, char propName, long propValue)
        Parameters:
           label: char const * value
           propName: char const * value
           propValue: long const value

           label: char const * value
           propName: char const * value
           propValue: long const value

        setProperty(self, char label, char propName, float propValue)
        Parameters:
           label: char const * value
           propName: char const * value
           propValue: float const value

           label: char const * value
           propName: char const * value
           propValue: float const value

        setProperty(self, char label, char propName, double propValue)
        Parameters:
           self: CMMCore * value
           label: char const * value
           propName: char const * value
           propValue: double const value

           label: char const * value
           propName: char const * value
           propValue: double const value

        """
        return _MMCorePy.CMMCore_setProperty(self, *args)

    def getAllowedPropertyValues(self, *args):
        """
        getAllowedPropertyValues(self, char label, char propName) -> StrVector
        Parameters:
           self: CMMCore * value
           label: char const * value
           propName: char const * value

           label: char const * value
           propName: char const * value

        """
        return _MMCorePy.CMMCore_getAllowedPropertyValues(self, *args)

    def isPropertyReadOnly(self, *args):
        """
        isPropertyReadOnly(self, char label, char propName) -> bool
        Parameters:
           self: CMMCore * value
           label: char const * value
           propName: char const * value

           label: char const * value
           propName: char const * value

        """
        return _MMCorePy.CMMCore_isPropertyReadOnly(self, *args)

    def isPropertyPreInit(self, *args):
        """
        isPropertyPreInit(self, char label, char propName) -> bool
        Parameters:
           self: CMMCore * value
           label: char const * value
           propName: char const * value

           label: char const * value
           propName: char const * value

        """
        return _MMCorePy.CMMCore_isPropertyPreInit(self, *args)

    def isPropertySequenceable(self, *args):
        """
        isPropertySequenceable(self, char label, char propName) -> bool
        Parameters:
           self: CMMCore * value
           label: char const * value
           propName: char const * value

           label: char const * value
           propName: char const * value

        """
        return _MMCorePy.CMMCore_isPropertySequenceable(self, *args)

    def hasPropertyLimits(self, *args):
        """
        hasPropertyLimits(self, char label, char propName) -> bool
        Parameters:
           self: CMMCore * value
           label: char const * value
           propName: char const * value

           label: char const * value
           propName: char const * value

        """
        return _MMCorePy.CMMCore_hasPropertyLimits(self, *args)

    def getPropertyLowerLimit(self, *args):
        """
        getPropertyLowerLimit(self, char label, char propName) -> double
        Parameters:
           self: CMMCore * value
           label: char const * value
           propName: char const * value

           label: char const * value
           propName: char const * value

        """
        return _MMCorePy.CMMCore_getPropertyLowerLimit(self, *args)

    def getPropertyUpperLimit(self, *args):
        """
        getPropertyUpperLimit(self, char label, char propName) -> double
        Parameters:
           self: CMMCore * value
           label: char const * value
           propName: char const * value

           label: char const * value
           propName: char const * value

        """
        return _MMCorePy.CMMCore_getPropertyUpperLimit(self, *args)

    def getPropertyType(self, *args):
        """
        getPropertyType(self, char label, char propName) -> PropertyType
        Parameters:
           self: CMMCore * value
           label: char const * value
           propName: char const * value

           label: char const * value
           propName: char const * value

        """
        return _MMCorePy.CMMCore_getPropertyType(self, *args)

    def startPropertySequence(self, *args):
        """
        startPropertySequence(self, char label, char propName)
        Parameters:
           self: CMMCore * value
           label: char const * value
           propName: char const * value

           label: char const * value
           propName: char const * value

        """
        return _MMCorePy.CMMCore_startPropertySequence(self, *args)

    def stopPropertySequence(self, *args):
        """
        stopPropertySequence(self, char label, char propName)
        Parameters:
           self: CMMCore * value
           label: char const * value
           propName: char const * value

           label: char const * value
           propName: char const * value

        """
        return _MMCorePy.CMMCore_stopPropertySequence(self, *args)

    def getPropertySequenceMaxLength(self, *args):
        """
        getPropertySequenceMaxLength(self, char label, char propName) -> long
        Parameters:
           self: CMMCore * value
           label: char const * value
           propName: char const * value

           label: char const * value
           propName: char const * value

        """
        return _MMCorePy.CMMCore_getPropertySequenceMaxLength(self, *args)

    def loadPropertySequence(self, *args):
        """
        loadPropertySequence(self, char label, char propName, StrVector eventSequence)
        Parameters:
           self: CMMCore * value
           label: char const * value
           propName: char const * value
           eventSequence: std::vector< std::string,std::allocator< std::string > > value

           label: char const * value
           propName: char const * value
           eventSequence: std::vector< std::string,std::allocator< std::string > > value

        """
        return _MMCorePy.CMMCore_loadPropertySequence(self, *args)

    def deviceBusy(self, *args):
        """
        deviceBusy(self, char label) -> bool
        Parameters:
           self: CMMCore * value
           label: char const * value

           label: char const * value

        """
        return _MMCorePy.CMMCore_deviceBusy(self, *args)

    def waitForDevice(self, *args):
        """
        waitForDevice(self, char label)
        Parameters:
           self: CMMCore * value
           label: char const * value

           label: char const * value

        """
        return _MMCorePy.CMMCore_waitForDevice(self, *args)

    def waitForConfig(self, *args):
        """
        waitForConfig(self, char group, char configName)
        Parameters:
           self: CMMCore * value
           group: char const * value
           configName: char const * value

           group: char const * value
           configName: char const * value

        """
        return _MMCorePy.CMMCore_waitForConfig(self, *args)

    def systemBusy(self):
        """
        systemBusy(self) -> bool
        Parameters:
           self: CMMCore * value




        """
        return _MMCorePy.CMMCore_systemBusy(self)

    def waitForSystem(self):
        """
        waitForSystem(self)
        Parameters:
           self: CMMCore * value




        """
        return _MMCorePy.CMMCore_waitForSystem(self)

    def waitForImageSynchro(self):
        """
        waitForImageSynchro(self)
        Parameters:
           self: CMMCore * value




        """
        return _MMCorePy.CMMCore_waitForImageSynchro(self)

    def deviceTypeBusy(self, *args):
        """
        deviceTypeBusy(self, DeviceType devType) -> bool
        Parameters:
           self: CMMCore * value
           devType: enum MM::DeviceType value

           devType: enum MM::DeviceType value

        """
        return _MMCorePy.CMMCore_deviceTypeBusy(self, *args)

    def waitForDeviceType(self, *args):
        """
        waitForDeviceType(self, DeviceType devType)
        Parameters:
           self: CMMCore * value
           devType: enum MM::DeviceType value

           devType: enum MM::DeviceType value

        """
        return _MMCorePy.CMMCore_waitForDeviceType(self, *args)

    def getDeviceDelayMs(self, *args):
        """
        getDeviceDelayMs(self, char label) -> double
        Parameters:
           self: CMMCore * value
           label: char const * value

           label: char const * value

        """
        return _MMCorePy.CMMCore_getDeviceDelayMs(self, *args)

    def setDeviceDelayMs(self, *args):
        """
        setDeviceDelayMs(self, char label, double delayMs)
        Parameters:
           self: CMMCore * value
           label: char const * value
           delayMs: double value

           label: char const * value
           delayMs: double value

        """
        return _MMCorePy.CMMCore_setDeviceDelayMs(self, *args)

    def usesDeviceDelay(self, *args):
        """
        usesDeviceDelay(self, char label) -> bool
        Parameters:
           self: CMMCore * value
           label: char const * value

           label: char const * value

        """
        return _MMCorePy.CMMCore_usesDeviceDelay(self, *args)

    def setTimeoutMs(self, *args):
        """
        setTimeoutMs(self, long timeoutMs)
        Parameters:
           self: CMMCore * value
           timeoutMs: long value

           timeoutMs: long value

        """
        return _MMCorePy.CMMCore_setTimeoutMs(self, *args)

    def getTimeoutMs(self):
        """
        getTimeoutMs(self) -> long
        Parameters:
           self: CMMCore * value




        """
        return _MMCorePy.CMMCore_getTimeoutMs(self)

    def sleep(self, *args):
        """
        sleep(self, double intervalMs)
        Parameters:
           self: CMMCore const * value
           intervalMs: double value

           intervalMs: double value

        """
        return _MMCorePy.CMMCore_sleep(self, *args)

    def getCameraDevice(self):
        """
        getCameraDevice(self) -> string
        Parameters:
           self: CMMCore * value




        """
        return _MMCorePy.CMMCore_getCameraDevice(self)

    def getShutterDevice(self):
        """
        getShutterDevice(self) -> string
        Parameters:
           self: CMMCore * value




        """
        return _MMCorePy.CMMCore_getShutterDevice(self)

    def getFocusDevice(self):
        """
        getFocusDevice(self) -> string
        Parameters:
           self: CMMCore * value




        """
        return _MMCorePy.CMMCore_getFocusDevice(self)

    def getXYStageDevice(self):
        """
        getXYStageDevice(self) -> string
        Parameters:
           self: CMMCore * value




        """
        return _MMCorePy.CMMCore_getXYStageDevice(self)

    def getAutoFocusDevice(self):
        """
        getAutoFocusDevice(self) -> string
        Parameters:
           self: CMMCore * value




        """
        return _MMCorePy.CMMCore_getAutoFocusDevice(self)

    def getImageProcessorDevice(self):
        """
        getImageProcessorDevice(self) -> string
        Parameters:
           self: CMMCore * value




        """
        return _MMCorePy.CMMCore_getImageProcessorDevice(self)

    def getSLMDevice(self):
        """
        getSLMDevice(self) -> string
        Parameters:
           self: CMMCore * value




        """
        return _MMCorePy.CMMCore_getSLMDevice(self)

    def getGalvoDevice(self):
        """
        getGalvoDevice(self) -> string
        Parameters:
           self: CMMCore * value




        """
        return _MMCorePy.CMMCore_getGalvoDevice(self)

    def getChannelGroup(self):
        """
        getChannelGroup(self) -> string
        Parameters:
           self: CMMCore * value




        """
        return _MMCorePy.CMMCore_getChannelGroup(self)

    def setCameraDevice(self, *args):
        """
        setCameraDevice(self, char cameraLabel)
        Parameters:
           self: CMMCore * value
           cameraLabel: char const * value

           cameraLabel: char const * value

        """
        return _MMCorePy.CMMCore_setCameraDevice(self, *args)

    def setShutterDevice(self, *args):
        """
        setShutterDevice(self, char shutterLabel)
        Parameters:
           self: CMMCore * value
           shutterLabel: char const * value

           shutterLabel: char const * value

        """
        return _MMCorePy.CMMCore_setShutterDevice(self, *args)

    def setFocusDevice(self, *args):
        """
        setFocusDevice(self, char focusLabel)
        Parameters:
           self: CMMCore * value
           focusLabel: char const * value

           focusLabel: char const * value

        """
        return _MMCorePy.CMMCore_setFocusDevice(self, *args)

    def setXYStageDevice(self, *args):
        """
        setXYStageDevice(self, char xyStageLabel)
        Parameters:
           self: CMMCore * value
           xyStageLabel: char const * value

           xyStageLabel: char const * value

        """
        return _MMCorePy.CMMCore_setXYStageDevice(self, *args)

    def setAutoFocusDevice(self, *args):
        """
        setAutoFocusDevice(self, char focusLabel)
        Parameters:
           self: CMMCore * value
           focusLabel: char const * value

           focusLabel: char const * value

        """
        return _MMCorePy.CMMCore_setAutoFocusDevice(self, *args)

    def setImageProcessorDevice(self, *args):
        """
        setImageProcessorDevice(self, char procLabel)
        Parameters:
           self: CMMCore * value
           procLabel: char const * value

           procLabel: char const * value

        """
        return _MMCorePy.CMMCore_setImageProcessorDevice(self, *args)

    def setSLMDevice(self, *args):
        """
        setSLMDevice(self, char slmLabel)
        Parameters:
           self: CMMCore * value
           slmLabel: char const * value

           slmLabel: char const * value

        """
        return _MMCorePy.CMMCore_setSLMDevice(self, *args)

    def setGalvoDevice(self, *args):
        """
        setGalvoDevice(self, char galvoLabel)
        Parameters:
           self: CMMCore * value
           galvoLabel: char const * value

           galvoLabel: char const * value

        """
        return _MMCorePy.CMMCore_setGalvoDevice(self, *args)

    def setChannelGroup(self, *args):
        """
        setChannelGroup(self, char channelGroup)
        Parameters:
           self: CMMCore * value
           channelGroup: char const * value

           channelGroup: char const * value

        """
        return _MMCorePy.CMMCore_setChannelGroup(self, *args)

    def getSystemStateCache(self):
        """
        getSystemStateCache(self) -> Configuration
        Parameters:
           self: CMMCore const * value




        """
        return _MMCorePy.CMMCore_getSystemStateCache(self)

    def updateSystemStateCache(self):
        """
        updateSystemStateCache(self)
        Parameters:
           self: CMMCore * value




        """
        return _MMCorePy.CMMCore_updateSystemStateCache(self)

    def getPropertyFromCache(self, *args):
        """
        getPropertyFromCache(self, char deviceLabel, char propName) -> string
        Parameters:
           self: CMMCore const * value
           deviceLabel: char const * value
           propName: char const * value

           deviceLabel: char const * value
           propName: char const * value

        """
        return _MMCorePy.CMMCore_getPropertyFromCache(self, *args)

    def getCurrentConfigFromCache(self, *args):
        """
        getCurrentConfigFromCache(self, char groupName) -> string
        Parameters:
           self: CMMCore * value
           groupName: char const * value

           groupName: char const * value

        """
        return _MMCorePy.CMMCore_getCurrentConfigFromCache(self, *args)

    def getConfigGroupStateFromCache(self, *args):
        """
        getConfigGroupStateFromCache(self, char group) -> Configuration
        Parameters:
           self: CMMCore * value
           group: char const * value

           group: char const * value

        """
        return _MMCorePy.CMMCore_getConfigGroupStateFromCache(self, *args)

    def defineConfig(self, *args):
        """
        defineConfig(self, char groupName, char configName)
        Parameters:
           groupName: char const * value
           configName: char const * value

           groupName: char const * value
           configName: char const * value

        defineConfig(self, char groupName, char configName, char deviceLabel, 
            char propName, char value)
        Parameters:
           self: CMMCore * value
           groupName: char const * value
           configName: char const * value
           deviceLabel: char const * value
           propName: char const * value
           value: char const * value

           groupName: char const * value
           configName: char const * value
           deviceLabel: char const * value
           propName: char const * value
           value: char const * value

        """
        return _MMCorePy.CMMCore_defineConfig(self, *args)

    def defineConfigGroup(self, *args):
        """
        defineConfigGroup(self, char groupName)
        Parameters:
           self: CMMCore * value
           groupName: char const * value

           groupName: char const * value

        """
        return _MMCorePy.CMMCore_defineConfigGroup(self, *args)

    def deleteConfigGroup(self, *args):
        """
        deleteConfigGroup(self, char groupName)
        Parameters:
           self: CMMCore * value
           groupName: char const * value

           groupName: char const * value

        """
        return _MMCorePy.CMMCore_deleteConfigGroup(self, *args)

    def renameConfigGroup(self, *args):
        """
        renameConfigGroup(self, char oldGroupName, char newGroupName)
        Parameters:
           self: CMMCore * value
           oldGroupName: char const * value
           newGroupName: char const * value

           oldGroupName: char const * value
           newGroupName: char const * value

        """
        return _MMCorePy.CMMCore_renameConfigGroup(self, *args)

    def isGroupDefined(self, *args):
        """
        isGroupDefined(self, char groupName) -> bool
        Parameters:
           self: CMMCore * value
           groupName: char const * value

           groupName: char const * value

        """
        return _MMCorePy.CMMCore_isGroupDefined(self, *args)

    def isConfigDefined(self, *args):
        """
        isConfigDefined(self, char groupName, char configName) -> bool
        Parameters:
           self: CMMCore * value
           groupName: char const * value
           configName: char const * value

           groupName: char const * value
           configName: char const * value

        """
        return _MMCorePy.CMMCore_isConfigDefined(self, *args)

    def setConfig(self, *args):
        """
        setConfig(self, char groupName, char configName)
        Parameters:
           self: CMMCore * value
           groupName: char const * value
           configName: char const * value

           groupName: char const * value
           configName: char const * value

        """
        return _MMCorePy.CMMCore_setConfig(self, *args)

    def deleteConfig(self, *args):
        """
        deleteConfig(self, char groupName, char configName)
        Parameters:
           groupName: char const * value
           configName: char const * value

           groupName: char const * value
           configName: char const * value

        deleteConfig(self, char groupName, char configName, char deviceLabel, 
            char propName)
        Parameters:
           self: CMMCore * value
           groupName: char const * value
           configName: char const * value
           deviceLabel: char const * value
           propName: char const * value

           groupName: char const * value
           configName: char const * value
           deviceLabel: char const * value
           propName: char const * value

        """
        return _MMCorePy.CMMCore_deleteConfig(self, *args)

    def renameConfig(self, *args):
        """
        renameConfig(self, char groupName, char oldConfigName, char newConfigName)
        Parameters:
           self: CMMCore * value
           groupName: char const * value
           oldConfigName: char const * value
           newConfigName: char const * value

           groupName: char const * value
           oldConfigName: char const * value
           newConfigName: char const * value

        """
        return _MMCorePy.CMMCore_renameConfig(self, *args)

    def getAvailableConfigGroups(self):
        """
        getAvailableConfigGroups(self) -> StrVector
        Parameters:
           self: CMMCore const * value




        """
        return _MMCorePy.CMMCore_getAvailableConfigGroups(self)

    def getAvailableConfigs(self, *args):
        """
        getAvailableConfigs(self, char configGroup) -> StrVector
        Parameters:
           self: CMMCore const * value
           configGroup: char const * value

           configGroup: char const * value

        """
        return _MMCorePy.CMMCore_getAvailableConfigs(self, *args)

    def getCurrentConfig(self, *args):
        """
        getCurrentConfig(self, char groupName) -> string
        Parameters:
           self: CMMCore * value
           groupName: char const * value

           groupName: char const * value

        """
        return _MMCorePy.CMMCore_getCurrentConfig(self, *args)

    def getConfigData(self, *args):
        """
        getConfigData(self, char configGroup, char configName) -> Configuration
        Parameters:
           self: CMMCore * value
           configGroup: char const * value
           configName: char const * value

           configGroup: char const * value
           configName: char const * value

        """
        return _MMCorePy.CMMCore_getConfigData(self, *args)

    def getCurrentPixelSizeConfig(self, *args):
        """
        getCurrentPixelSizeConfig(self) -> string
        getCurrentPixelSizeConfig(self, bool cached) -> string
        Parameters:
           self: CMMCore * value
           cached: bool value

           cached: bool value

        """
        return _MMCorePy.CMMCore_getCurrentPixelSizeConfig(self, *args)

    def getPixelSizeUm(self, *args):
        """
        getPixelSizeUm(self) -> double
        getPixelSizeUm(self, bool cached) -> double
        Parameters:
           self: CMMCore * value
           cached: bool value

           cached: bool value

        """
        return _MMCorePy.CMMCore_getPixelSizeUm(self, *args)

    def getPixelSizeUmByID(self, *args):
        """
        getPixelSizeUmByID(self, char resolutionID) -> double
        Parameters:
           self: CMMCore * value
           resolutionID: char const * value

           resolutionID: char const * value

        """
        return _MMCorePy.CMMCore_getPixelSizeUmByID(self, *args)

    def getMagnificationFactor(self):
        """
        getMagnificationFactor(self) -> double
        Parameters:
           self: CMMCore const * value




        """
        return _MMCorePy.CMMCore_getMagnificationFactor(self)

    def setPixelSizeUm(self, *args):
        """
        setPixelSizeUm(self, char resolutionID, double pixSize)
        Parameters:
           self: CMMCore * value
           resolutionID: char const * value
           pixSize: double value

           resolutionID: char const * value
           pixSize: double value

        """
        return _MMCorePy.CMMCore_setPixelSizeUm(self, *args)

    def definePixelSizeConfig(self, *args):
        """
        definePixelSizeConfig(self, char resolutionID, char deviceLabel, char propName, 
            char value)
        Parameters:
           resolutionID: char const * value
           deviceLabel: char const * value
           propName: char const * value
           value: char const * value

           resolutionID: char const * value
           deviceLabel: char const * value
           propName: char const * value
           value: char const * value

        definePixelSizeConfig(self, char resolutionID)
        Parameters:
           self: CMMCore * value
           resolutionID: char const * value

           resolutionID: char const * value

        """
        return _MMCorePy.CMMCore_definePixelSizeConfig(self, *args)

    def getAvailablePixelSizeConfigs(self):
        """
        getAvailablePixelSizeConfigs(self) -> StrVector
        Parameters:
           self: CMMCore const * value




        """
        return _MMCorePy.CMMCore_getAvailablePixelSizeConfigs(self)

    def isPixelSizeConfigDefined(self, *args):
        """
        isPixelSizeConfigDefined(self, char resolutionID) -> bool
        Parameters:
           self: CMMCore const * value
           resolutionID: char const * value

           resolutionID: char const * value

        """
        return _MMCorePy.CMMCore_isPixelSizeConfigDefined(self, *args)

    def setPixelSizeConfig(self, *args):
        """
        setPixelSizeConfig(self, char resolutionID)
        Parameters:
           self: CMMCore * value
           resolutionID: char const * value

           resolutionID: char const * value

        """
        return _MMCorePy.CMMCore_setPixelSizeConfig(self, *args)

    def renamePixelSizeConfig(self, *args):
        """
        renamePixelSizeConfig(self, char oldConfigName, char newConfigName)
        Parameters:
           self: CMMCore * value
           oldConfigName: char const * value
           newConfigName: char const * value

           oldConfigName: char const * value
           newConfigName: char const * value

        """
        return _MMCorePy.CMMCore_renamePixelSizeConfig(self, *args)

    def deletePixelSizeConfig(self, *args):
        """
        deletePixelSizeConfig(self, char configName)
        Parameters:
           self: CMMCore * value
           configName: char const * value

           configName: char const * value

        """
        return _MMCorePy.CMMCore_deletePixelSizeConfig(self, *args)

    def getPixelSizeConfigData(self, *args):
        """
        getPixelSizeConfigData(self, char configName) -> Configuration
        Parameters:
           self: CMMCore * value
           configName: char const * value

           configName: char const * value

        """
        return _MMCorePy.CMMCore_getPixelSizeConfigData(self, *args)

    def definePropertyBlock(self, *args):
        """
        definePropertyBlock(self, char blockName, char propertyName, char propertyValue)
        Parameters:
           self: CMMCore * value
           blockName: char const * value
           propertyName: char const * value
           propertyValue: char const * value

           blockName: char const * value
           propertyName: char const * value
           propertyValue: char const * value

        """
        return _MMCorePy.CMMCore_definePropertyBlock(self, *args)

    def getAvailablePropertyBlocks(self):
        """
        getAvailablePropertyBlocks(self) -> StrVector
        Parameters:
           self: CMMCore const * value




        """
        return _MMCorePy.CMMCore_getAvailablePropertyBlocks(self)

    def getPropertyBlockData(self, *args):
        """
        getPropertyBlockData(self, char blockName) -> PropertyBlock
        Parameters:
           self: CMMCore * value
           blockName: char const * value

           blockName: char const * value

        """
        return _MMCorePy.CMMCore_getPropertyBlockData(self, *args)

    def setROI(self, *args):
        """
        setROI(self, int x, int y, int xSize, int ySize)
        Parameters:
           self: CMMCore * value
           x: int value
           y: int value
           xSize: int value
           ySize: int value

           x: int value
           y: int value
           xSize: int value
           ySize: int value

        """
        return _MMCorePy.CMMCore_setROI(self, *args)

    def getROI(self, *args):
        """
        getROI(self)
        getROI(self, char label)
        Parameters:
           self: CMMCore * value
           label: char const * value

           label: char const * value

        """
        return _MMCorePy.CMMCore_getROI(self, *args)

    def clearROI(self):
        """
        clearROI(self)
        Parameters:
           self: CMMCore * value




        """
        return _MMCorePy.CMMCore_clearROI(self)

    def setExposure(self, *args):
        """
        setExposure(self, double exp)
        Parameters:
           exp: double value

           exp: double value

        setExposure(self, char cameraLabel, double dExp)
        Parameters:
           self: CMMCore * value
           cameraLabel: char const * value
           dExp: double value

           cameraLabel: char const * value
           dExp: double value

        """
        return _MMCorePy.CMMCore_setExposure(self, *args)

    def getExposure(self):
        """
        getExposure(self) -> double
        Parameters:
           self: CMMCore * value




        """
        return _MMCorePy.CMMCore_getExposure(self)

    def snapImage(self):
        """
        snapImage(self)
        Parameters:
           self: CMMCore * value




        """
        return _MMCorePy.CMMCore_snapImage(self)

    def getImage(self, *args):
        """
        getImage(self)
        getImage(self, unsigned int numChannel) -> void
        Parameters:
           self: CMMCore * value
           numChannel: unsigned int value

           numChannel: unsigned int value

        """
        return _MMCorePy.CMMCore_getImage(self, *args)

    def getImageWidth(self):
        """
        getImageWidth(self) -> unsigned int
        Parameters:
           self: CMMCore * value




        """
        return _MMCorePy.CMMCore_getImageWidth(self)

    def getImageHeight(self):
        """
        getImageHeight(self) -> unsigned int
        Parameters:
           self: CMMCore * value




        """
        return _MMCorePy.CMMCore_getImageHeight(self)

    def getBytesPerPixel(self):
        """
        getBytesPerPixel(self) -> unsigned int
        Parameters:
           self: CMMCore * value




        """
        return _MMCorePy.CMMCore_getBytesPerPixel(self)

    def getImageBitDepth(self):
        """
        getImageBitDepth(self) -> unsigned int
        Parameters:
           self: CMMCore * value




        """
        return _MMCorePy.CMMCore_getImageBitDepth(self)

    def getNumberOfComponents(self):
        """
        getNumberOfComponents(self) -> unsigned int
        Parameters:
           self: CMMCore * value




        """
        return _MMCorePy.CMMCore_getNumberOfComponents(self)

    def getNumberOfCameraChannels(self):
        """
        getNumberOfCameraChannels(self) -> unsigned int
        Parameters:
           self: CMMCore * value




        """
        return _MMCorePy.CMMCore_getNumberOfCameraChannels(self)

    def getCameraChannelName(self, *args):
        """
        getCameraChannelName(self, unsigned int channelNr) -> string
        Parameters:
           self: CMMCore * value
           channelNr: unsigned int value

           channelNr: unsigned int value

        """
        return _MMCorePy.CMMCore_getCameraChannelName(self, *args)

    def getImageBufferSize(self):
        """
        getImageBufferSize(self) -> long
        Parameters:
           self: CMMCore * value




        """
        return _MMCorePy.CMMCore_getImageBufferSize(self)

    def assignImageSynchro(self, *args):
        """
        assignImageSynchro(self, char deviceLabel)
        Parameters:
           self: CMMCore * value
           deviceLabel: char const * value

           deviceLabel: char const * value

        """
        return _MMCorePy.CMMCore_assignImageSynchro(self, *args)

    def removeImageSynchro(self, *args):
        """
        removeImageSynchro(self, char deviceLabel)
        Parameters:
           self: CMMCore * value
           deviceLabel: char const * value

           deviceLabel: char const * value

        """
        return _MMCorePy.CMMCore_removeImageSynchro(self, *args)

    def removeImageSynchroAll(self):
        """
        removeImageSynchroAll(self)
        Parameters:
           self: CMMCore * value




        """
        return _MMCorePy.CMMCore_removeImageSynchroAll(self)

    def setAutoShutter(self, *args):
        """
        setAutoShutter(self, bool state)
        Parameters:
           self: CMMCore * value
           state: bool value

           state: bool value

        """
        return _MMCorePy.CMMCore_setAutoShutter(self, *args)

    def getAutoShutter(self):
        """
        getAutoShutter(self) -> bool
        Parameters:
           self: CMMCore * value




        """
        return _MMCorePy.CMMCore_getAutoShutter(self)

    def setShutterOpen(self, *args):
        """
        setShutterOpen(self, bool state)
        Parameters:
           state: bool value

           state: bool value

        setShutterOpen(self, char shutterLabel, bool state)
        Parameters:
           self: CMMCore * value
           shutterLabel: char const * value
           state: bool value

           shutterLabel: char const * value
           state: bool value

        """
        return _MMCorePy.CMMCore_setShutterOpen(self, *args)

    def getShutterOpen(self, *args):
        """
        getShutterOpen(self) -> bool
        getShutterOpen(self, char shutterLabel) -> bool
        Parameters:
           self: CMMCore * value
           shutterLabel: char const * value

           shutterLabel: char const * value

        """
        return _MMCorePy.CMMCore_getShutterOpen(self, *args)

    def startSequenceAcquisition(self, *args):
        """
        startSequenceAcquisition(self, long numImages, double intervalMs, bool stopOnOverflow)
        Parameters:
           numImages: long value
           intervalMs: double value
           stopOnOverflow: bool value

           numImages: long value
           intervalMs: double value
           stopOnOverflow: bool value

        startSequenceAcquisition(self, char cameraLabel, long numImages, double intervalMs, 
            bool stopOnOverflow)
        Parameters:
           self: CMMCore * value
           cameraLabel: char const * value
           numImages: long value
           intervalMs: double value
           stopOnOverflow: bool value

           cameraLabel: char const * value
           numImages: long value
           intervalMs: double value
           stopOnOverflow: bool value

        """
        return _MMCorePy.CMMCore_startSequenceAcquisition(self, *args)

    def prepareSequenceAcquisition(self, *args):
        """
        prepareSequenceAcquisition(self, char cameraLabel)
        Parameters:
           self: CMMCore * value
           cameraLabel: char const * value

           cameraLabel: char const * value

        """
        return _MMCorePy.CMMCore_prepareSequenceAcquisition(self, *args)

    def startContinuousSequenceAcquisition(self, *args):
        """
        startContinuousSequenceAcquisition(self, double intervalMs)
        Parameters:
           self: CMMCore * value
           intervalMs: double value

           intervalMs: double value

        """
        return _MMCorePy.CMMCore_startContinuousSequenceAcquisition(self, *args)

    def stopSequenceAcquisition(self, *args):
        """
        stopSequenceAcquisition(self)
        stopSequenceAcquisition(self, char cameraLabel)
        Parameters:
           self: CMMCore * value
           cameraLabel: char const * value

           cameraLabel: char const * value

        """
        return _MMCorePy.CMMCore_stopSequenceAcquisition(self, *args)

    def isSequenceRunning(self, *args):
        """
        isSequenceRunning(self) -> bool
        isSequenceRunning(self, char cameraLabel) -> bool
        Parameters:
           self: CMMCore * value
           cameraLabel: char const * value

           cameraLabel: char const * value

        """
        return _MMCorePy.CMMCore_isSequenceRunning(self, *args)

    def getLastImage(self):
        """
        getLastImage(self) -> void
        Parameters:
           self: CMMCore * value




        """
        return _MMCorePy.CMMCore_getLastImage(self)

    def popNextImage(self):
        """
        popNextImage(self) -> void
        Parameters:
           self: CMMCore * value




        """
        return _MMCorePy.CMMCore_popNextImage(self)

    def getLastImageMD(self, *args):
        """
        getLastImageMD(self, unsigned int channel, unsigned int slice, Metadata md)
        Parameters:
           channel: unsigned int value
           slice: unsigned int value
           md: Metadata & value

           channel: unsigned int value
           slice: unsigned int value
           md: Metadata & value

        getLastImageMD(self, Metadata md) -> void
        Parameters:
           self: CMMCore const * value
           md: Metadata & value

           md: Metadata & value

        """
        return _MMCorePy.CMMCore_getLastImageMD(self, *args)

    def getNBeforeLastImageMD(self, *args):
        """
        getNBeforeLastImageMD(self, unsigned long n, Metadata md) -> void
        Parameters:
           self: CMMCore const * value
           n: unsigned long value
           md: Metadata & value

           n: unsigned long value
           md: Metadata & value

        """
        return _MMCorePy.CMMCore_getNBeforeLastImageMD(self, *args)

    def popNextImageMD(self, *args):
        """
        popNextImageMD(self, unsigned int channel, unsigned int slice, Metadata md)
        Parameters:
           channel: unsigned int value
           slice: unsigned int value
           md: Metadata & value

           channel: unsigned int value
           slice: unsigned int value
           md: Metadata & value

        popNextImageMD(self, Metadata md) -> void
        Parameters:
           self: CMMCore * value
           md: Metadata & value

           md: Metadata & value

        """
        return _MMCorePy.CMMCore_popNextImageMD(self, *args)

    def getRemainingImageCount(self):
        """
        getRemainingImageCount(self) -> long
        Parameters:
           self: CMMCore * value




        """
        return _MMCorePy.CMMCore_getRemainingImageCount(self)

    def getBufferTotalCapacity(self):
        """
        getBufferTotalCapacity(self) -> long
        Parameters:
           self: CMMCore * value




        """
        return _MMCorePy.CMMCore_getBufferTotalCapacity(self)

    def getBufferFreeCapacity(self):
        """
        getBufferFreeCapacity(self) -> long
        Parameters:
           self: CMMCore * value




        """
        return _MMCorePy.CMMCore_getBufferFreeCapacity(self)

    def isBufferOverflowed(self):
        """
        isBufferOverflowed(self) -> bool
        Parameters:
           self: CMMCore const * value




        """
        return _MMCorePy.CMMCore_isBufferOverflowed(self)

    def setCircularBufferMemoryFootprint(self, *args):
        """
        setCircularBufferMemoryFootprint(self, unsigned int sizeMB)
        Parameters:
           self: CMMCore * value
           sizeMB: unsigned int value

           sizeMB: unsigned int value

        """
        return _MMCorePy.CMMCore_setCircularBufferMemoryFootprint(self, *args)

    def getCircularBufferMemoryFootprint(self):
        """
        getCircularBufferMemoryFootprint(self) -> unsigned int
        Parameters:
           self: CMMCore * value




        """
        return _MMCorePy.CMMCore_getCircularBufferMemoryFootprint(self)

    def initializeCircularBuffer(self):
        """
        initializeCircularBuffer(self)
        Parameters:
           self: CMMCore * value




        """
        return _MMCorePy.CMMCore_initializeCircularBuffer(self)

    def clearCircularBuffer(self):
        """
        clearCircularBuffer(self)
        Parameters:
           self: CMMCore * value




        """
        return _MMCorePy.CMMCore_clearCircularBuffer(self)

    def isExposureSequenceable(self, *args):
        """
        isExposureSequenceable(self, char cameraLabel) -> bool
        Parameters:
           self: CMMCore * value
           cameraLabel: char const * value

           cameraLabel: char const * value

        """
        return _MMCorePy.CMMCore_isExposureSequenceable(self, *args)

    def startExposureSequence(self, *args):
        """
        startExposureSequence(self, char cameraLabel)
        Parameters:
           self: CMMCore * value
           cameraLabel: char const * value

           cameraLabel: char const * value

        """
        return _MMCorePy.CMMCore_startExposureSequence(self, *args)

    def stopExposureSequence(self, *args):
        """
        stopExposureSequence(self, char cameraLabel)
        Parameters:
           self: CMMCore * value
           cameraLabel: char const * value

           cameraLabel: char const * value

        """
        return _MMCorePy.CMMCore_stopExposureSequence(self, *args)

    def getExposureSequenceMaxLength(self, *args):
        """
        getExposureSequenceMaxLength(self, char cameraLabel) -> long
        Parameters:
           self: CMMCore * value
           cameraLabel: char const * value

           cameraLabel: char const * value

        """
        return _MMCorePy.CMMCore_getExposureSequenceMaxLength(self, *args)

    def loadExposureSequence(self, *args):
        """
        loadExposureSequence(self, char cameraLabel, std::vector<(double,std::allocator<(double)>)> exposureSequence_ms)
        Parameters:
           self: CMMCore * value
           cameraLabel: char const * value
           exposureSequence_ms: std::vector< double,std::allocator< double > > value

           cameraLabel: char const * value
           exposureSequence_ms: std::vector< double,std::allocator< double > > value

        """
        return _MMCorePy.CMMCore_loadExposureSequence(self, *args)

    def getLastFocusScore(self):
        """
        getLastFocusScore(self) -> double
        Parameters:
           self: CMMCore * value




        """
        return _MMCorePy.CMMCore_getLastFocusScore(self)

    def getCurrentFocusScore(self):
        """
        getCurrentFocusScore(self) -> double
        Parameters:
           self: CMMCore * value




        """
        return _MMCorePy.CMMCore_getCurrentFocusScore(self)

    def enableContinuousFocus(self, *args):
        """
        enableContinuousFocus(self, bool enable)
        Parameters:
           self: CMMCore * value
           enable: bool value

           enable: bool value

        """
        return _MMCorePy.CMMCore_enableContinuousFocus(self, *args)

    def isContinuousFocusEnabled(self):
        """
        isContinuousFocusEnabled(self) -> bool
        Parameters:
           self: CMMCore * value




        """
        return _MMCorePy.CMMCore_isContinuousFocusEnabled(self)

    def isContinuousFocusLocked(self):
        """
        isContinuousFocusLocked(self) -> bool
        Parameters:
           self: CMMCore * value




        """
        return _MMCorePy.CMMCore_isContinuousFocusLocked(self)

    def isContinuousFocusDrive(self, *args):
        """
        isContinuousFocusDrive(self, char stageLabel) -> bool
        Parameters:
           self: CMMCore * value
           stageLabel: char const * value

           stageLabel: char const * value

        """
        return _MMCorePy.CMMCore_isContinuousFocusDrive(self, *args)

    def fullFocus(self):
        """
        fullFocus(self)
        Parameters:
           self: CMMCore * value




        """
        return _MMCorePy.CMMCore_fullFocus(self)

    def incrementalFocus(self):
        """
        incrementalFocus(self)
        Parameters:
           self: CMMCore * value




        """
        return _MMCorePy.CMMCore_incrementalFocus(self)

    def setAutoFocusOffset(self, *args):
        """
        setAutoFocusOffset(self, double offset)
        Parameters:
           self: CMMCore * value
           offset: double value

           offset: double value

        """
        return _MMCorePy.CMMCore_setAutoFocusOffset(self, *args)

    def getAutoFocusOffset(self):
        """
        getAutoFocusOffset(self) -> double
        Parameters:
           self: CMMCore * value




        """
        return _MMCorePy.CMMCore_getAutoFocusOffset(self)

    def setState(self, *args):
        """
        setState(self, char stateDeviceLabel, long state)
        Parameters:
           self: CMMCore * value
           stateDeviceLabel: char const * value
           state: long value

           stateDeviceLabel: char const * value
           state: long value

        """
        return _MMCorePy.CMMCore_setState(self, *args)

    def getState(self, *args):
        """
        getState(self, char stateDeviceLabel) -> long
        Parameters:
           self: CMMCore * value
           stateDeviceLabel: char const * value

           stateDeviceLabel: char const * value

        """
        return _MMCorePy.CMMCore_getState(self, *args)

    def getNumberOfStates(self, *args):
        """
        getNumberOfStates(self, char stateDeviceLabel) -> long
        Parameters:
           self: CMMCore * value
           stateDeviceLabel: char const * value

           stateDeviceLabel: char const * value

        """
        return _MMCorePy.CMMCore_getNumberOfStates(self, *args)

    def setStateLabel(self, *args):
        """
        setStateLabel(self, char stateDeviceLabel, char stateLabel)
        Parameters:
           self: CMMCore * value
           stateDeviceLabel: char const * value
           stateLabel: char const * value

           stateDeviceLabel: char const * value
           stateLabel: char const * value

        """
        return _MMCorePy.CMMCore_setStateLabel(self, *args)

    def getStateLabel(self, *args):
        """
        getStateLabel(self, char stateDeviceLabel) -> string
        Parameters:
           self: CMMCore * value
           stateDeviceLabel: char const * value

           stateDeviceLabel: char const * value

        """
        return _MMCorePy.CMMCore_getStateLabel(self, *args)

    def defineStateLabel(self, *args):
        """
        defineStateLabel(self, char stateDeviceLabel, long state, char stateLabel)
        Parameters:
           self: CMMCore * value
           stateDeviceLabel: char const * value
           state: long value
           stateLabel: char const * value

           stateDeviceLabel: char const * value
           state: long value
           stateLabel: char const * value

        """
        return _MMCorePy.CMMCore_defineStateLabel(self, *args)

    def getStateLabels(self, *args):
        """
        getStateLabels(self, char stateDeviceLabel) -> StrVector
        Parameters:
           self: CMMCore * value
           stateDeviceLabel: char const * value

           stateDeviceLabel: char const * value

        """
        return _MMCorePy.CMMCore_getStateLabels(self, *args)

    def getStateFromLabel(self, *args):
        """
        getStateFromLabel(self, char stateDeviceLabel, char stateLabel) -> long
        Parameters:
           self: CMMCore * value
           stateDeviceLabel: char const * value
           stateLabel: char const * value

           stateDeviceLabel: char const * value
           stateLabel: char const * value

        """
        return _MMCorePy.CMMCore_getStateFromLabel(self, *args)

    def getStateLabelData(self, *args):
        """
        getStateLabelData(self, char stateDeviceLabel, char stateLabel) -> PropertyBlock
        Parameters:
           self: CMMCore * value
           stateDeviceLabel: char const * value
           stateLabel: char const * value

           stateDeviceLabel: char const * value
           stateLabel: char const * value

        """
        return _MMCorePy.CMMCore_getStateLabelData(self, *args)

    def getData(self, *args):
        """
        getData(self, char stateDeviceLabel) -> PropertyBlock
        Parameters:
           self: CMMCore * value
           stateDeviceLabel: char const * value

           stateDeviceLabel: char const * value

        """
        return _MMCorePy.CMMCore_getData(self, *args)

    def setPosition(self, *args):
        """
        setPosition(self, char stageLabel, double position)
        Parameters:
           stageLabel: char const * value
           position: double value

           stageLabel: char const * value
           position: double value

        setPosition(self, double position)
        Parameters:
           self: CMMCore * value
           position: double value

           position: double value

        """
        return _MMCorePy.CMMCore_setPosition(self, *args)

    def getPosition(self, *args):
        """
        getPosition(self, char stageLabel) -> double
        Parameters:
           stageLabel: char const * value

           stageLabel: char const * value

        getPosition(self) -> double
        Parameters:
           self: CMMCore * value


        """
        return _MMCorePy.CMMCore_getPosition(self, *args)

    def setRelativePosition(self, *args):
        """
        setRelativePosition(self, char stageLabel, double d)
        Parameters:
           stageLabel: char const * value
           d: double value

           stageLabel: char const * value
           d: double value

        setRelativePosition(self, double d)
        Parameters:
           self: CMMCore * value
           d: double value

           d: double value

        """
        return _MMCorePy.CMMCore_setRelativePosition(self, *args)

    def setOrigin(self, *args):
        """
        setOrigin(self, char stageLabel)
        Parameters:
           stageLabel: char const * value

           stageLabel: char const * value

        setOrigin(self)
        Parameters:
           self: CMMCore * value


        """
        return _MMCorePy.CMMCore_setOrigin(self, *args)

    def setAdapterOrigin(self, *args):
        """
        setAdapterOrigin(self, char stageLabel, double newZUm)
        Parameters:
           stageLabel: char const * value
           newZUm: double value

           stageLabel: char const * value
           newZUm: double value

        setAdapterOrigin(self, double newZUm)
        Parameters:
           self: CMMCore * value
           newZUm: double value

           newZUm: double value

        """
        return _MMCorePy.CMMCore_setAdapterOrigin(self, *args)

    def setFocusDirection(self, *args):
        """
        setFocusDirection(self, char stageLabel, int sign)
        Parameters:
           self: CMMCore * value
           stageLabel: char const * value
           sign: int value

           stageLabel: char const * value
           sign: int value

        """
        return _MMCorePy.CMMCore_setFocusDirection(self, *args)

    def getFocusDirection(self, *args):
        """
        getFocusDirection(self, char stageLabel) -> int
        Parameters:
           self: CMMCore * value
           stageLabel: char const * value

           stageLabel: char const * value

        """
        return _MMCorePy.CMMCore_getFocusDirection(self, *args)

    def isStageSequenceable(self, *args):
        """
        isStageSequenceable(self, char stageLabel) -> bool
        Parameters:
           self: CMMCore * value
           stageLabel: char const * value

           stageLabel: char const * value

        """
        return _MMCorePy.CMMCore_isStageSequenceable(self, *args)

    def startStageSequence(self, *args):
        """
        startStageSequence(self, char stageLabel)
        Parameters:
           self: CMMCore * value
           stageLabel: char const * value

           stageLabel: char const * value

        """
        return _MMCorePy.CMMCore_startStageSequence(self, *args)

    def stopStageSequence(self, *args):
        """
        stopStageSequence(self, char stageLabel)
        Parameters:
           self: CMMCore * value
           stageLabel: char const * value

           stageLabel: char const * value

        """
        return _MMCorePy.CMMCore_stopStageSequence(self, *args)

    def getStageSequenceMaxLength(self, *args):
        """
        getStageSequenceMaxLength(self, char stageLabel) -> long
        Parameters:
           self: CMMCore * value
           stageLabel: char const * value

           stageLabel: char const * value

        """
        return _MMCorePy.CMMCore_getStageSequenceMaxLength(self, *args)

    def loadStageSequence(self, *args):
        """
        loadStageSequence(self, char stageLabel, std::vector<(double,std::allocator<(double)>)> positionSequence)
        Parameters:
           self: CMMCore * value
           stageLabel: char const * value
           positionSequence: std::vector< double,std::allocator< double > > value

           stageLabel: char const * value
           positionSequence: std::vector< double,std::allocator< double > > value

        """
        return _MMCorePy.CMMCore_loadStageSequence(self, *args)

    def setXYPosition(self, *args):
        """
        setXYPosition(self, char xyStageLabel, double x, double y)
        Parameters:
           xyStageLabel: char const * value
           x: double value
           y: double value

           xyStageLabel: char const * value
           x: double value
           y: double value

        setXYPosition(self, double x, double y)
        Parameters:
           self: CMMCore * value
           x: double value
           y: double value

           x: double value
           y: double value

        """
        return _MMCorePy.CMMCore_setXYPosition(self, *args)

    def setRelativeXYPosition(self, *args):
        """
        setRelativeXYPosition(self, char xyStageLabel, double dx, double dy)
        Parameters:
           xyStageLabel: char const * value
           dx: double value
           dy: double value

           xyStageLabel: char const * value
           dx: double value
           dy: double value

        setRelativeXYPosition(self, double dx, double dy)
        Parameters:
           self: CMMCore * value
           dx: double value
           dy: double value

           dx: double value
           dy: double value

        """
        return _MMCorePy.CMMCore_setRelativeXYPosition(self, *args)

    def getXYPosition(self, *args):
        """
        getXYPosition(self, char xyStageLabel, double x_stage, double y_stage)
        Parameters:
           xyStageLabel: char const * value
           x_stage: double & value
           y_stage: double & value

           xyStageLabel: char const * value
           x_stage: double & value
           y_stage: double & value

        getXYPosition(self, double x_stage, double y_stage)
        Parameters:
           self: CMMCore * value
           x_stage: double & value
           y_stage: double & value

           x_stage: double & value
           y_stage: double & value

        """
        return _MMCorePy.CMMCore_getXYPosition(self, *args)

    def getXPosition(self, *args):
        """
        getXPosition(self, char xyStageLabel) -> double
        Parameters:
           xyStageLabel: char const * value

           xyStageLabel: char const * value

        getXPosition(self) -> double
        Parameters:
           self: CMMCore * value


        """
        return _MMCorePy.CMMCore_getXPosition(self, *args)

    def getYPosition(self, *args):
        """
        getYPosition(self, char xyStageLabel) -> double
        Parameters:
           xyStageLabel: char const * value

           xyStageLabel: char const * value

        getYPosition(self) -> double
        Parameters:
           self: CMMCore * value


        """
        return _MMCorePy.CMMCore_getYPosition(self, *args)

    def stop(self, *args):
        """
        stop(self, char xyOrZStageLabel)
        Parameters:
           self: CMMCore * value
           xyOrZStageLabel: char const * value

           xyOrZStageLabel: char const * value

        """
        return _MMCorePy.CMMCore_stop(self, *args)

    def home(self, *args):
        """
        home(self, char xyOrZStageLabel)
        Parameters:
           self: CMMCore * value
           xyOrZStageLabel: char const * value

           xyOrZStageLabel: char const * value

        """
        return _MMCorePy.CMMCore_home(self, *args)

    def setOriginXY(self, *args):
        """
        setOriginXY(self, char xyStageLabel)
        Parameters:
           xyStageLabel: char const * value

           xyStageLabel: char const * value

        setOriginXY(self)
        Parameters:
           self: CMMCore * value


        """
        return _MMCorePy.CMMCore_setOriginXY(self, *args)

    def setOriginX(self, *args):
        """
        setOriginX(self, char xyStageLabel)
        Parameters:
           xyStageLabel: char const * value

           xyStageLabel: char const * value

        setOriginX(self)
        Parameters:
           self: CMMCore * value


        """
        return _MMCorePy.CMMCore_setOriginX(self, *args)

    def setOriginY(self, *args):
        """
        setOriginY(self, char xyStageLabel)
        Parameters:
           xyStageLabel: char const * value

           xyStageLabel: char const * value

        setOriginY(self)
        Parameters:
           self: CMMCore * value


        """
        return _MMCorePy.CMMCore_setOriginY(self, *args)

    def setAdapterOriginXY(self, *args):
        """
        setAdapterOriginXY(self, char xyStageLabel, double newXUm, double newYUm)
        Parameters:
           xyStageLabel: char const * value
           newXUm: double value
           newYUm: double value

           xyStageLabel: char const * value
           newXUm: double value
           newYUm: double value

        setAdapterOriginXY(self, double newXUm, double newYUm)
        Parameters:
           self: CMMCore * value
           newXUm: double value
           newYUm: double value

           newXUm: double value
           newYUm: double value

        """
        return _MMCorePy.CMMCore_setAdapterOriginXY(self, *args)

    def isXYStageSequenceable(self, *args):
        """
        isXYStageSequenceable(self, char xyStageLabel) -> bool
        Parameters:
           self: CMMCore * value
           xyStageLabel: char const * value

           xyStageLabel: char const * value

        """
        return _MMCorePy.CMMCore_isXYStageSequenceable(self, *args)

    def startXYStageSequence(self, *args):
        """
        startXYStageSequence(self, char xyStageLabel)
        Parameters:
           self: CMMCore * value
           xyStageLabel: char const * value

           xyStageLabel: char const * value

        """
        return _MMCorePy.CMMCore_startXYStageSequence(self, *args)

    def stopXYStageSequence(self, *args):
        """
        stopXYStageSequence(self, char xyStageLabel)
        Parameters:
           self: CMMCore * value
           xyStageLabel: char const * value

           xyStageLabel: char const * value

        """
        return _MMCorePy.CMMCore_stopXYStageSequence(self, *args)

    def getXYStageSequenceMaxLength(self, *args):
        """
        getXYStageSequenceMaxLength(self, char xyStageLabel) -> long
        Parameters:
           self: CMMCore * value
           xyStageLabel: char const * value

           xyStageLabel: char const * value

        """
        return _MMCorePy.CMMCore_getXYStageSequenceMaxLength(self, *args)

    def loadXYStageSequence(self, *args):
        """
        loadXYStageSequence(self, char xyStageLabel, std::vector<(double,std::allocator<(double)>)> xSequence, 
            std::vector<(double,std::allocator<(double)>)> ySequence)
        Parameters:
           self: CMMCore * value
           xyStageLabel: char const * value
           xSequence: std::vector< double,std::allocator< double > > value
           ySequence: std::vector< double,std::allocator< double > > value

           xyStageLabel: char const * value
           xSequence: std::vector< double,std::allocator< double > > value
           ySequence: std::vector< double,std::allocator< double > > value

        """
        return _MMCorePy.CMMCore_loadXYStageSequence(self, *args)

    def setSerialProperties(self, *args):
        """
        setSerialProperties(self, char portName, char answerTimeout, char baudRate, char delayBetweenCharsMs, 
            char handshaking, char parity, 
            char stopBits)
        Parameters:
           self: CMMCore * value
           portName: char const * value
           answerTimeout: char const * value
           baudRate: char const * value
           delayBetweenCharsMs: char const * value
           handshaking: char const * value
           parity: char const * value
           stopBits: char const * value

           portName: char const * value
           answerTimeout: char const * value
           baudRate: char const * value
           delayBetweenCharsMs: char const * value
           handshaking: char const * value
           parity: char const * value
           stopBits: char const * value

        """
        return _MMCorePy.CMMCore_setSerialProperties(self, *args)

    def setSerialPortCommand(self, *args):
        """
        setSerialPortCommand(self, char portLabel, char command, char term)
        Parameters:
           self: CMMCore * value
           portLabel: char const * value
           command: char const * value
           term: char const * value

           portLabel: char const * value
           command: char const * value
           term: char const * value

        """
        return _MMCorePy.CMMCore_setSerialPortCommand(self, *args)

    def getSerialPortAnswer(self, *args):
        """
        getSerialPortAnswer(self, char portLabel, char term) -> string
        Parameters:
           self: CMMCore * value
           portLabel: char const * value
           term: char const * value

           portLabel: char const * value
           term: char const * value

        """
        return _MMCorePy.CMMCore_getSerialPortAnswer(self, *args)

    def writeToSerialPort(self, *args):
        """
        writeToSerialPort(self, char portLabel, CharVector data)
        Parameters:
           self: CMMCore * value
           portLabel: char const * value
           data: std::vector< char,std::allocator< char > > const & value

           portLabel: char const * value
           data: std::vector< char,std::allocator< char > > const & value

        """
        return _MMCorePy.CMMCore_writeToSerialPort(self, *args)

    def readFromSerialPort(self, *args):
        """
        readFromSerialPort(self, char portLabel) -> CharVector
        Parameters:
           self: CMMCore * value
           portLabel: char const * value

           portLabel: char const * value

        """
        return _MMCorePy.CMMCore_readFromSerialPort(self, *args)

    def setSLMImage(self, *args):
        """
        setSLMImage(self, char slmLabel, unsigned char pixels)
        Parameters:
           slmLabel: char const * value
           pixels: unsigned char * value

           slmLabel: char const * value
           pixels: unsigned char * value

        setSLMImage(self, char slmLabel, imgRGB32 pixels)
        Parameters:
           self: CMMCore * value
           slmLabel: char const * value
           pixels: imgRGB32 value

           slmLabel: char const * value
           pixels: imgRGB32 value

        """
        return _MMCorePy.CMMCore_setSLMImage(self, *args)

    def setSLMPixelsTo(self, *args):
        """
        setSLMPixelsTo(self, char slmLabel, unsigned char intensity)
        Parameters:
           slmLabel: char const * value
           intensity: unsigned char value

           slmLabel: char const * value
           intensity: unsigned char value

        setSLMPixelsTo(self, char slmLabel, unsigned char red, unsigned char green, 
            unsigned char blue)
        Parameters:
           self: CMMCore * value
           slmLabel: char const * value
           red: unsigned char value
           green: unsigned char value
           blue: unsigned char value

           slmLabel: char const * value
           red: unsigned char value
           green: unsigned char value
           blue: unsigned char value

        """
        return _MMCorePy.CMMCore_setSLMPixelsTo(self, *args)

    def displaySLMImage(self, *args):
        """
        displaySLMImage(self, char slmLabel)
        Parameters:
           self: CMMCore * value
           slmLabel: char const * value

           slmLabel: char const * value

        """
        return _MMCorePy.CMMCore_displaySLMImage(self, *args)

    def setSLMExposure(self, *args):
        """
        setSLMExposure(self, char slmLabel, double exposure_ms)
        Parameters:
           self: CMMCore * value
           slmLabel: char const * value
           exposure_ms: double value

           slmLabel: char const * value
           exposure_ms: double value

        """
        return _MMCorePy.CMMCore_setSLMExposure(self, *args)

    def getSLMExposure(self, *args):
        """
        getSLMExposure(self, char slmLabel) -> double
        Parameters:
           self: CMMCore * value
           slmLabel: char const * value

           slmLabel: char const * value

        """
        return _MMCorePy.CMMCore_getSLMExposure(self, *args)

    def getSLMWidth(self, *args):
        """
        getSLMWidth(self, char slmLabel) -> unsigned int
        Parameters:
           self: CMMCore * value
           slmLabel: char const * value

           slmLabel: char const * value

        """
        return _MMCorePy.CMMCore_getSLMWidth(self, *args)

    def getSLMHeight(self, *args):
        """
        getSLMHeight(self, char slmLabel) -> unsigned int
        Parameters:
           self: CMMCore * value
           slmLabel: char const * value

           slmLabel: char const * value

        """
        return _MMCorePy.CMMCore_getSLMHeight(self, *args)

    def getSLMNumberOfComponents(self, *args):
        """
        getSLMNumberOfComponents(self, char slmLabel) -> unsigned int
        Parameters:
           self: CMMCore * value
           slmLabel: char const * value

           slmLabel: char const * value

        """
        return _MMCorePy.CMMCore_getSLMNumberOfComponents(self, *args)

    def getSLMBytesPerPixel(self, *args):
        """
        getSLMBytesPerPixel(self, char slmLabel) -> unsigned int
        Parameters:
           self: CMMCore * value
           slmLabel: char const * value

           slmLabel: char const * value

        """
        return _MMCorePy.CMMCore_getSLMBytesPerPixel(self, *args)

    def getSLMSequenceMaxLength(self, *args):
        """
        getSLMSequenceMaxLength(self, char slmLabel) -> long
        Parameters:
           self: CMMCore * value
           slmLabel: char const * value

           slmLabel: char const * value

        """
        return _MMCorePy.CMMCore_getSLMSequenceMaxLength(self, *args)

    def startSLMSequence(self, *args):
        """
        startSLMSequence(self, char slmLabel)
        Parameters:
           self: CMMCore * value
           slmLabel: char const * value

           slmLabel: char const * value

        """
        return _MMCorePy.CMMCore_startSLMSequence(self, *args)

    def stopSLMSequence(self, *args):
        """
        stopSLMSequence(self, char slmLabel)
        Parameters:
           self: CMMCore * value
           slmLabel: char const * value

           slmLabel: char const * value

        """
        return _MMCorePy.CMMCore_stopSLMSequence(self, *args)

    def loadSLMSequence(self, *args):
        """
        loadSLMSequence(self, char slmLabel, std::vector<(p.unsigned char,std::allocator<(p.unsigned char)>)> imageSequence)
        Parameters:
           self: CMMCore * value
           slmLabel: char const * value
           imageSequence: std::vector< unsigned char *,std::allocator< unsigned char * > > value

           slmLabel: char const * value
           imageSequence: std::vector< unsigned char *,std::allocator< unsigned char * > > value

        """
        return _MMCorePy.CMMCore_loadSLMSequence(self, *args)

    def pointGalvoAndFire(self, *args):
        """
        pointGalvoAndFire(self, char galvoLabel, double x, double y, double pulseTime_us)
        Parameters:
           self: CMMCore * value
           galvoLabel: char const * value
           x: double value
           y: double value
           pulseTime_us: double value

           galvoLabel: char const * value
           x: double value
           y: double value
           pulseTime_us: double value

        """
        return _MMCorePy.CMMCore_pointGalvoAndFire(self, *args)

    def setGalvoSpotInterval(self, *args):
        """
        setGalvoSpotInterval(self, char galvoLabel, double pulseTime_us)
        Parameters:
           self: CMMCore * value
           galvoLabel: char const * value
           pulseTime_us: double value

           galvoLabel: char const * value
           pulseTime_us: double value

        """
        return _MMCorePy.CMMCore_setGalvoSpotInterval(self, *args)

    def setGalvoPosition(self, *args):
        """
        setGalvoPosition(self, char galvoLabel, double x, double y)
        Parameters:
           self: CMMCore * value
           galvoLabel: char const * value
           x: double value
           y: double value

           galvoLabel: char const * value
           x: double value
           y: double value

        """
        return _MMCorePy.CMMCore_setGalvoPosition(self, *args)

    def getGalvoPosition(self, *args):
        """
        getGalvoPosition(self, char galvoLabel, double x_stage, double y_stage)
        Parameters:
           self: CMMCore * value
           galvoLabel: char const * value
           x_stage: double & value
           y_stage: double & value

           galvoLabel: char const * value
           x_stage: double & value
           y_stage: double & value

        """
        return _MMCorePy.CMMCore_getGalvoPosition(self, *args)

    def setGalvoIlluminationState(self, *args):
        """
        setGalvoIlluminationState(self, char galvoLabel, bool on)
        Parameters:
           self: CMMCore * value
           galvoLabel: char const * value
           on: bool value

           galvoLabel: char const * value
           on: bool value

        """
        return _MMCorePy.CMMCore_setGalvoIlluminationState(self, *args)

    def getGalvoXRange(self, *args):
        """
        getGalvoXRange(self, char galvoLabel) -> double
        Parameters:
           self: CMMCore * value
           galvoLabel: char const * value

           galvoLabel: char const * value

        """
        return _MMCorePy.CMMCore_getGalvoXRange(self, *args)

    def getGalvoXMinimum(self, *args):
        """
        getGalvoXMinimum(self, char galvoLabel) -> double
        Parameters:
           self: CMMCore * value
           galvoLabel: char const * value

           galvoLabel: char const * value

        """
        return _MMCorePy.CMMCore_getGalvoXMinimum(self, *args)

    def getGalvoYRange(self, *args):
        """
        getGalvoYRange(self, char galvoLabel) -> double
        Parameters:
           self: CMMCore * value
           galvoLabel: char const * value

           galvoLabel: char const * value

        """
        return _MMCorePy.CMMCore_getGalvoYRange(self, *args)

    def getGalvoYMinimum(self, *args):
        """
        getGalvoYMinimum(self, char galvoLabel) -> double
        Parameters:
           self: CMMCore * value
           galvoLabel: char const * value

           galvoLabel: char const * value

        """
        return _MMCorePy.CMMCore_getGalvoYMinimum(self, *args)

    def addGalvoPolygonVertex(self, *args):
        """
        addGalvoPolygonVertex(self, char galvoLabel, int polygonIndex, double x, double y)
        Parameters:
           self: CMMCore * value
           galvoLabel: char const * value
           polygonIndex: int value
           x: double value
           y: double value

           galvoLabel: char const * value
           polygonIndex: int value
           x: double value
           y: double value

        """
        return _MMCorePy.CMMCore_addGalvoPolygonVertex(self, *args)

    def deleteGalvoPolygons(self, *args):
        """
        deleteGalvoPolygons(self, char galvoLabel)
        Parameters:
           self: CMMCore * value
           galvoLabel: char const * value

           galvoLabel: char const * value

        """
        return _MMCorePy.CMMCore_deleteGalvoPolygons(self, *args)

    def loadGalvoPolygons(self, *args):
        """
        loadGalvoPolygons(self, char galvoLabel)
        Parameters:
           self: CMMCore * value
           galvoLabel: char const * value

           galvoLabel: char const * value

        """
        return _MMCorePy.CMMCore_loadGalvoPolygons(self, *args)

    def setGalvoPolygonRepetitions(self, *args):
        """
        setGalvoPolygonRepetitions(self, char galvoLabel, int repetitions)
        Parameters:
           self: CMMCore * value
           galvoLabel: char const * value
           repetitions: int value

           galvoLabel: char const * value
           repetitions: int value

        """
        return _MMCorePy.CMMCore_setGalvoPolygonRepetitions(self, *args)

    def runGalvoPolygons(self, *args):
        """
        runGalvoPolygons(self, char galvoLabel)
        Parameters:
           self: CMMCore * value
           galvoLabel: char const * value

           galvoLabel: char const * value

        """
        return _MMCorePy.CMMCore_runGalvoPolygons(self, *args)

    def runGalvoSequence(self, *args):
        """
        runGalvoSequence(self, char galvoLabel)
        Parameters:
           self: CMMCore * value
           galvoLabel: char const * value

           galvoLabel: char const * value

        """
        return _MMCorePy.CMMCore_runGalvoSequence(self, *args)

    def getGalvoChannel(self, *args):
        """
        getGalvoChannel(self, char galvoLabel) -> string
        Parameters:
           self: CMMCore * value
           galvoLabel: char const * value

           galvoLabel: char const * value

        """
        return _MMCorePy.CMMCore_getGalvoChannel(self, *args)

    def detectDevice(self, *args):
        """
        detectDevice(self, char deviceLabel) -> DeviceDetectionStatus
        Parameters:
           self: CMMCore * value
           deviceLabel: char * value

           deviceLabel: char * value

        """
        return _MMCorePy.CMMCore_detectDevice(self, *args)

    def getParentLabel(self, *args):
        """
        getParentLabel(self, char peripheralLabel) -> string
        Parameters:
           self: CMMCore * value
           peripheralLabel: char const * value

           peripheralLabel: char const * value

        """
        return _MMCorePy.CMMCore_getParentLabel(self, *args)

    def setParentLabel(self, *args):
        """
        setParentLabel(self, char deviceLabel, char parentHubLabel)
        Parameters:
           self: CMMCore * value
           deviceLabel: char const * value
           parentHubLabel: char const * value

           deviceLabel: char const * value
           parentHubLabel: char const * value

        """
        return _MMCorePy.CMMCore_setParentLabel(self, *args)

    def getInstalledDevices(self, *args):
        """
        getInstalledDevices(self, char hubLabel) -> StrVector
        Parameters:
           self: CMMCore * value
           hubLabel: char const * value

           hubLabel: char const * value

        """
        return _MMCorePy.CMMCore_getInstalledDevices(self, *args)

    def getInstalledDeviceDescription(self, *args):
        """
        getInstalledDeviceDescription(self, char hubLabel, char peripheralLabel) -> string
        Parameters:
           self: CMMCore * value
           hubLabel: char const * value
           peripheralLabel: char const * value

           hubLabel: char const * value
           peripheralLabel: char const * value

        """
        return _MMCorePy.CMMCore_getInstalledDeviceDescription(self, *args)

    def getLoadedPeripheralDevices(self, *args):
        """
        getLoadedPeripheralDevices(self, char hubLabel) -> StrVector
        Parameters:
           self: CMMCore * value
           hubLabel: char const * value

           hubLabel: char const * value

        """
        return _MMCorePy.CMMCore_getLoadedPeripheralDevices(self, *args)

    def getUserId(self):
        """
        getUserId(self) -> string
        Parameters:
           self: CMMCore const * value




        """
        return _MMCorePy.CMMCore_getUserId(self)

    def getHostName(self):
        """
        getHostName(self) -> string
        Parameters:
           self: CMMCore const * value




        """
        return _MMCorePy.CMMCore_getHostName(self)

    def getMACAddresses(self):
        """
        getMACAddresses(self) -> StrVector
        Parameters:
           self: CMMCore * value




        """
        return _MMCorePy.CMMCore_getMACAddresses(self)

CMMCore_swigregister = _MMCorePy.CMMCore_swigregister
CMMCore_swigregister(CMMCore)

def CMMCore_noop():
  """CMMCore_noop()"""
  return _MMCorePy.CMMCore_noop()

def CMMCore_addSearchPath(*args):
  """
    CMMCore_addSearchPath(char path)
    Parameters:
       path: char const * value

       path: char const * value

    """
  return _MMCorePy.CMMCore_addSearchPath(*args)

def CMMCore_getDeviceLibraries():
  """CMMCore_getDeviceLibraries() -> StrVector"""
  return _MMCorePy.CMMCore_getDeviceLibraries()

class MetadataError(_object):
    """Proxy of C++ MetadataError class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MetadataError, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MetadataError, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, char msg) -> MetadataError
        Parameters:
           msg: char const * value

           msg: char const * value

        """
        this = _MMCorePy.new_MetadataError(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MMCorePy.delete_MetadataError
    __del__ = lambda self : None;
    def getMsg(self):
        """
        getMsg(self) -> string
        Parameters:
           self: MetadataError * value




        """
        return _MMCorePy.MetadataError_getMsg(self)

MetadataError_swigregister = _MMCorePy.MetadataError_swigregister
MetadataError_swigregister(MetadataError)

class MetadataKeyError(MetadataError):
    """Proxy of C++ MetadataKeyError class"""
    __swig_setmethods__ = {}
    for _s in [MetadataError]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MetadataKeyError, name, value)
    __swig_getmethods__ = {}
    for _s in [MetadataError]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MetadataKeyError, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> MetadataKeyError"""
        this = _MMCorePy.new_MetadataKeyError()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MMCorePy.delete_MetadataKeyError
    __del__ = lambda self : None;
    def __getitem__(self, *args):
        """
        __getitem__(self, int n) -> string
        Parameters:
           self: MetadataKeyError * value
           n: int value

           n: int value

        """
        return _MMCorePy.MetadataKeyError___getitem__(self, *args)

    def __str__(self):
        """
        __str__(self) -> string
        Parameters:
           self: MetadataKeyError * value




        """
        return _MMCorePy.MetadataKeyError___str__(self)

MetadataKeyError_swigregister = _MMCorePy.MetadataKeyError_swigregister
MetadataKeyError_swigregister(MetadataKeyError)

class MetadataIndexError(MetadataError):
    """Proxy of C++ MetadataIndexError class"""
    __swig_setmethods__ = {}
    for _s in [MetadataError]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MetadataIndexError, name, value)
    __swig_getmethods__ = {}
    for _s in [MetadataError]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MetadataIndexError, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> MetadataIndexError"""
        this = _MMCorePy.new_MetadataIndexError()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MMCorePy.delete_MetadataIndexError
    __del__ = lambda self : None;
    def __getitem__(self, *args):
        """
        __getitem__(self, int n) -> string
        Parameters:
           self: MetadataIndexError * value
           n: int value

           n: int value

        """
        return _MMCorePy.MetadataIndexError___getitem__(self, *args)

    def __str__(self):
        """
        __str__(self) -> string
        Parameters:
           self: MetadataIndexError * value




        """
        return _MMCorePy.MetadataIndexError___str__(self)

MetadataIndexError_swigregister = _MMCorePy.MetadataIndexError_swigregister
MetadataIndexError_swigregister(MetadataIndexError)

class MetadataTag(_object):
    """Proxy of C++ MetadataTag class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MetadataTag, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MetadataTag, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _MMCorePy.delete_MetadataTag
    __del__ = lambda self : None;
    def GetDevice(self):
        """
        GetDevice(self) -> string
        Parameters:
           self: MetadataTag const * value




        """
        return _MMCorePy.MetadataTag_GetDevice(self)

    def GetName(self):
        """
        GetName(self) -> string
        Parameters:
           self: MetadataTag const * value




        """
        return _MMCorePy.MetadataTag_GetName(self)

    def GetQualifiedName(self):
        """
        GetQualifiedName(self) -> string
        Parameters:
           self: MetadataTag const * value




        """
        return _MMCorePy.MetadataTag_GetQualifiedName(self)

    def IsReadOnly(self):
        """
        IsReadOnly(self) -> bool
        Parameters:
           self: MetadataTag const * value




        """
        return _MMCorePy.MetadataTag_IsReadOnly(self)

    def SetDevice(self, *args):
        """
        SetDevice(self, char device)
        Parameters:
           self: MetadataTag * value
           device: char const * value

           device: char const * value

        """
        return _MMCorePy.MetadataTag_SetDevice(self, *args)

    def SetName(self, *args):
        """
        SetName(self, char name)
        Parameters:
           self: MetadataTag * value
           name: char const * value

           name: char const * value

        """
        return _MMCorePy.MetadataTag_SetName(self, *args)

    def SetReadOnly(self, *args):
        """
        SetReadOnly(self, bool ro)
        Parameters:
           self: MetadataTag * value
           ro: bool value

           ro: bool value

        """
        return _MMCorePy.MetadataTag_SetReadOnly(self, *args)

    def ToSingleTag(self):
        """
        ToSingleTag(self) -> MetadataSingleTag
        Parameters:
           self: MetadataTag const * value




        """
        return _MMCorePy.MetadataTag_ToSingleTag(self)

    def ToArrayTag(self):
        """
        ToArrayTag(self) -> MetadataArrayTag
        Parameters:
           self: MetadataTag const * value




        """
        return _MMCorePy.MetadataTag_ToArrayTag(self)

    def Clone(self):
        """
        Clone(self) -> MetadataTag
        Parameters:
           self: MetadataTag * value




        """
        return _MMCorePy.MetadataTag_Clone(self)

    def Serialize(self):
        """
        Serialize(self) -> string
        Parameters:
           self: MetadataTag * value




        """
        return _MMCorePy.MetadataTag_Serialize(self)

    def Restore(self, *args):
        """
        Restore(self, char stream) -> bool
        Parameters:
           self: MetadataTag * value
           stream: char const * value

           stream: char const * value

        """
        return _MMCorePy.MetadataTag_Restore(self, *args)

MetadataTag_swigregister = _MMCorePy.MetadataTag_swigregister
MetadataTag_swigregister(MetadataTag)

class MetadataSingleTag(MetadataTag):
    """Proxy of C++ MetadataSingleTag class"""
    __swig_setmethods__ = {}
    for _s in [MetadataTag]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MetadataSingleTag, name, value)
    __swig_getmethods__ = {}
    for _s in [MetadataTag]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MetadataSingleTag, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> MetadataSingleTag
        __init__(self, char name, char device, bool readOnly) -> MetadataSingleTag
        Parameters:
           name: char const * value
           device: char const * value
           readOnly: bool value

           name: char const * value
           device: char const * value
           readOnly: bool value

        """
        this = _MMCorePy.new_MetadataSingleTag(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MMCorePy.delete_MetadataSingleTag
    __del__ = lambda self : None;
    def GetValue(self):
        """
        GetValue(self) -> string
        Parameters:
           self: MetadataSingleTag const * value




        """
        return _MMCorePy.MetadataSingleTag_GetValue(self)

    def SetValue(self, *args):
        """
        SetValue(self, char val)
        Parameters:
           self: MetadataSingleTag * value
           val: char const * value

           val: char const * value

        """
        return _MMCorePy.MetadataSingleTag_SetValue(self, *args)

    def ToSingleTag(self):
        """
        ToSingleTag(self) -> MetadataSingleTag
        Parameters:
           self: MetadataSingleTag const * value




        """
        return _MMCorePy.MetadataSingleTag_ToSingleTag(self)

    def Clone(self):
        """
        Clone(self) -> MetadataTag
        Parameters:
           self: MetadataSingleTag * value




        """
        return _MMCorePy.MetadataSingleTag_Clone(self)

    def Serialize(self):
        """
        Serialize(self) -> string
        Parameters:
           self: MetadataSingleTag * value




        """
        return _MMCorePy.MetadataSingleTag_Serialize(self)

    def Restore(self, *args):
        """
        Restore(self, char stream) -> bool
        Parameters:
           self: MetadataSingleTag * value
           stream: char const * value

           stream: char const * value

        """
        return _MMCorePy.MetadataSingleTag_Restore(self, *args)

MetadataSingleTag_swigregister = _MMCorePy.MetadataSingleTag_swigregister
MetadataSingleTag_swigregister(MetadataSingleTag)

class MetadataArrayTag(MetadataTag):
    """Proxy of C++ MetadataArrayTag class"""
    __swig_setmethods__ = {}
    for _s in [MetadataTag]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MetadataArrayTag, name, value)
    __swig_getmethods__ = {}
    for _s in [MetadataTag]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MetadataArrayTag, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> MetadataArrayTag"""
        this = _MMCorePy.new_MetadataArrayTag()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MMCorePy.delete_MetadataArrayTag
    __del__ = lambda self : None;
    def ToArrayTag(self):
        """
        ToArrayTag(self) -> MetadataArrayTag
        Parameters:
           self: MetadataArrayTag const * value




        """
        return _MMCorePy.MetadataArrayTag_ToArrayTag(self)

    def AddValue(self, *args):
        """
        AddValue(self, char val)
        Parameters:
           self: MetadataArrayTag * value
           val: char const * value

           val: char const * value

        """
        return _MMCorePy.MetadataArrayTag_AddValue(self, *args)

    def SetValue(self, *args):
        """
        SetValue(self, char val, size_t idx)
        Parameters:
           self: MetadataArrayTag * value
           val: char const * value
           idx: size_t value

           val: char const * value
           idx: size_t value

        """
        return _MMCorePy.MetadataArrayTag_SetValue(self, *args)

    def GetValue(self, *args):
        """
        GetValue(self, size_t idx) -> string
        Parameters:
           self: MetadataArrayTag const * value
           idx: size_t value

           idx: size_t value

        """
        return _MMCorePy.MetadataArrayTag_GetValue(self, *args)

    def GetSize(self):
        """
        GetSize(self) -> size_t
        Parameters:
           self: MetadataArrayTag const * value




        """
        return _MMCorePy.MetadataArrayTag_GetSize(self)

    def Clone(self):
        """
        Clone(self) -> MetadataTag
        Parameters:
           self: MetadataArrayTag * value




        """
        return _MMCorePy.MetadataArrayTag_Clone(self)

    def Serialize(self):
        """
        Serialize(self) -> string
        Parameters:
           self: MetadataArrayTag * value




        """
        return _MMCorePy.MetadataArrayTag_Serialize(self)

    def Restore(self, *args):
        """
        Restore(self, char stream) -> bool
        Parameters:
           self: MetadataArrayTag * value
           stream: char const * value

           stream: char const * value

        """
        return _MMCorePy.MetadataArrayTag_Restore(self, *args)

MetadataArrayTag_swigregister = _MMCorePy.MetadataArrayTag_swigregister
MetadataArrayTag_swigregister(MetadataArrayTag)

class Metadata(_object):
    """Proxy of C++ Metadata class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Metadata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Metadata, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _MMCorePy.delete_Metadata
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(self) -> Metadata
        __init__(self, Metadata original) -> Metadata
        Parameters:
           original: Metadata const & value

           original: Metadata const & value

        """
        this = _MMCorePy.new_Metadata(*args)
        try: self.this.append(this)
        except: self.this = this
    def Clear(self):
        """
        Clear(self)
        Parameters:
           self: Metadata * value




        """
        return _MMCorePy.Metadata_Clear(self)

    def GetKeys(self):
        """
        GetKeys(self) -> StrVector
        Parameters:
           self: Metadata const * value




        """
        return _MMCorePy.Metadata_GetKeys(self)

    def HasTag(self, *args):
        """
        HasTag(self, char key) -> bool
        Parameters:
           self: Metadata * value
           key: char const * value

           key: char const * value

        """
        return _MMCorePy.Metadata_HasTag(self, *args)

    def GetSingleTag(self, *args):
        """
        GetSingleTag(self, char key) -> MetadataSingleTag
        Parameters:
           self: Metadata const * value
           key: char const * value

           key: char const * value

        """
        return _MMCorePy.Metadata_GetSingleTag(self, *args)

    def GetArrayTag(self, *args):
        """
        GetArrayTag(self, char key) -> MetadataArrayTag
        Parameters:
           self: Metadata const * value
           key: char const * value

           key: char const * value

        """
        return _MMCorePy.Metadata_GetArrayTag(self, *args)

    def SetTag(self, *args):
        """
        SetTag(self, MetadataTag tag)
        Parameters:
           self: Metadata * value
           tag: MetadataTag & value

           tag: MetadataTag & value

        """
        return _MMCorePy.Metadata_SetTag(self, *args)

    def RemoveTag(self, *args):
        """
        RemoveTag(self, char key)
        Parameters:
           self: Metadata * value
           key: char const * value

           key: char const * value

        """
        return _MMCorePy.Metadata_RemoveTag(self, *args)

    def Merge(self, *args):
        """
        Merge(self, Metadata newTags)
        Parameters:
           self: Metadata * value
           newTags: Metadata const & value

           newTags: Metadata const & value

        """
        return _MMCorePy.Metadata_Merge(self, *args)

    def Serialize(self):
        """
        Serialize(self) -> string
        Parameters:
           self: Metadata const * value




        """
        return _MMCorePy.Metadata_Serialize(self)

    def readLine(self, *args):
        """
        readLine(self, std::istringstream iss) -> string
        Parameters:
           self: Metadata * value
           iss: std::istringstream & value

           iss: std::istringstream & value

        """
        return _MMCorePy.Metadata_readLine(self, *args)

    def Restore(self, *args):
        """
        Restore(self, char stream) -> bool
        Parameters:
           self: Metadata * value
           stream: char const * value

           stream: char const * value

        """
        return _MMCorePy.Metadata_Restore(self, *args)

    def Dump(self):
        """
        Dump(self) -> string
        Parameters:
           self: Metadata * value




        """
        return _MMCorePy.Metadata_Dump(self)

Metadata_swigregister = _MMCorePy.Metadata_swigregister
Metadata_swigregister(Metadata)

class MMEventCallback(_object):
    """Proxy of C++ MMEventCallback class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MMEventCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MMEventCallback, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(self) -> MMEventCallback
        Parameters:
           self: PyObject * value




        """
        if self.__class__ == MMEventCallback:
            _self = None
        else:
            _self = self
        this = _MMCorePy.new_MMEventCallback(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MMCorePy.delete_MMEventCallback
    __del__ = lambda self : None;
    def onPropertiesChanged(self):
        """
        onPropertiesChanged(self)
        Parameters:
           self: MMEventCallback * value




        """
        return _MMCorePy.MMEventCallback_onPropertiesChanged(self)

    def onPropertyChanged(self, *args):
        """
        onPropertyChanged(self, char name, char propName, char propValue)
        Parameters:
           self: MMEventCallback * value
           name: char const * value
           propName: char const * value
           propValue: char const * value

           name: char const * value
           propName: char const * value
           propValue: char const * value

        """
        return _MMCorePy.MMEventCallback_onPropertyChanged(self, *args)

    def onConfigGroupChanged(self, *args):
        """
        onConfigGroupChanged(self, char groupName, char newConfigName)
        Parameters:
           self: MMEventCallback * value
           groupName: char const * value
           newConfigName: char const * value

           groupName: char const * value
           newConfigName: char const * value

        """
        return _MMCorePy.MMEventCallback_onConfigGroupChanged(self, *args)

    def onSystemConfigurationLoaded(self):
        """
        onSystemConfigurationLoaded(self)
        Parameters:
           self: MMEventCallback * value




        """
        return _MMCorePy.MMEventCallback_onSystemConfigurationLoaded(self)

    def onPixelSizeChanged(self, *args):
        """
        onPixelSizeChanged(self, double newPixelSizeUm)
        Parameters:
           self: MMEventCallback * value
           newPixelSizeUm: double value

           newPixelSizeUm: double value

        """
        return _MMCorePy.MMEventCallback_onPixelSizeChanged(self, *args)

    def onStagePositionChanged(self, *args):
        """
        onStagePositionChanged(self, char name, double pos)
        Parameters:
           self: MMEventCallback * value
           name: char * value
           pos: double value

           name: char * value
           pos: double value

        """
        return _MMCorePy.MMEventCallback_onStagePositionChanged(self, *args)

    def onXYStagePositionChanged(self, *args):
        """
        onXYStagePositionChanged(self, char name, double xpos, double ypos)
        Parameters:
           self: MMEventCallback * value
           name: char * value
           xpos: double value
           ypos: double value

           name: char * value
           xpos: double value
           ypos: double value

        """
        return _MMCorePy.MMEventCallback_onXYStagePositionChanged(self, *args)

    def onExposureChanged(self, *args):
        """
        onExposureChanged(self, char name, double newExposure)
        Parameters:
           self: MMEventCallback * value
           name: char * value
           newExposure: double value

           name: char * value
           newExposure: double value

        """
        return _MMCorePy.MMEventCallback_onExposureChanged(self, *args)

    def onSLMExposureChanged(self, *args):
        """
        onSLMExposureChanged(self, char name, double newExposure)
        Parameters:
           self: MMEventCallback * value
           name: char * value
           newExposure: double value

           name: char * value
           newExposure: double value

        """
        return _MMCorePy.MMEventCallback_onSLMExposureChanged(self, *args)

    def __disown__(self):
        self.this.disown()
        _MMCorePy.disown_MMEventCallback(self)
        return weakref_proxy(self)
MMEventCallback_swigregister = _MMCorePy.MMEventCallback_swigregister
MMEventCallback_swigregister(MMEventCallback)



